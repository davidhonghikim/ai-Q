{
  "metadata": {
    "sub_recipe_id": "01-02-system-monitoring",
    "title": "System Monitoring Infrastructure - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T16:00:00Z",
    "purpose": "Exact step-by-step monitoring infrastructure implementation with zero ambiguity",
    "total_tasks": 20,
    "estimated_duration": "2-3 days",
    "complexity": "Advanced",
    "dependencies": ["01-01-docker-environment"],
    "monitoring_stack": ["Prometheus", "Grafana", "Node Exporter", "Alert Manager", "cAdvisor"]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured", 
      "01-01-03: Docker networks created",
      "01-01-04: Docker Compose configured",
      "01-01-05: Volume management setup"
    ],
    "system_requirements": {
      "cpu": "Minimum 2 cores for monitoring stack",
      "ram": "Minimum 4GB for monitoring stack",
      "storage": "Minimum 20GB for monitoring data",
      "network": "Access to monitoring networks"
    }
  },
  "task_01_install_prometheus": {
    "task_id": "01-02-01",
    "title": "Install and Configure Prometheus",
    "description": "Install Prometheus with exact configuration and service discovery",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-02-01-01",
        "title": "Create Prometheus configuration directory",
        "description": "Create directory structure for Prometheus configuration",
        "commands": [
          "sudo mkdir -p /opt/ai-q/monitoring/prometheus/config",
          "sudo mkdir -p /opt/ai-q/monitoring/prometheus/data",
          "sudo mkdir -p /opt/ai-q/monitoring/prometheus/rules",
          "sudo mkdir -p /opt/ai-q/monitoring/prometheus/targets"
        ],
        "verification": "Check directories created",
        "expected_output": "All Prometheus directories created successfully"
      },
      {
        "step_id": "01-02-01-02",
        "title": "Create Prometheus configuration file",
        "description": "Create prometheus.yml with exact configuration",
        "config_file": "/opt/ai-q/monitoring/prometheus/config/prometheus.yml",
        "config_content": {
          "global": {
            "scrape_interval": "15s",
            "evaluation_interval": "15s",
            "external_labels": {
              "cluster": "ai-q-cluster",
              "environment": "production"
            }
          },
          "rule_files": [
            "/etc/prometheus/rules/*.yml"
          ],
          "scrape_configs": [
            {
              "job_name": "prometheus",
              "static_configs": [
                {
                  "targets": ["localhost:9090"]
                }
              ]
            },
            {
              "job_name": "node-exporter",
              "static_configs": [
                {
                  "targets": ["node-exporter:9100"]
                }
              ]
            },
            {
              "job_name": "cadvisor",
              "static_configs": [
                {
                  "targets": ["cadvisor:8080"]
                }
              ]
            },
            {
              "job_name": "docker",
              "static_configs": [
                {
                  "targets": ["docker:9323"]
                }
              ]
            }
          ],
          "alerting": {
            "alertmanagers": [
              {
                "static_configs": [
                  {
                    "targets": ["alertmanager:9093"]
                  }
                ]
              }
            ]
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/monitoring/prometheus/config/prometheus.yml << 'EOF'\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: ai-q-cluster\n    environment: production\n\nrule_files:\n  - /etc/prometheus/rules/*.yml\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets:\n        - localhost:9090\n\n  - job_name: node-exporter\n    static_configs:\n      - targets:\n        - node-exporter:9100\n\n  - job_name: cadvisor\n    static_configs:\n      - targets:\n        - cadvisor:8080\n\n  - job_name: docker\n    static_configs:\n      - targets:\n        - docker:9323\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\nEOF"
        ],
        "verification": "Check configuration file exists and has correct content",
        "expected_output": "prometheus.yml created with specified configuration"
      },
      {
        "step_id": "01-02-01-03",
        "title": "Create Prometheus alert rules",
        "description": "Create alert rules for system monitoring",
        "config_file": "/opt/ai-q/monitoring/prometheus/rules/alerts.yml",
        "config_content": {
          "groups": [
            {
              "name": "ai-q-system-alerts",
              "rules": [
                {
                  "alert": "HighCPUUsage",
                  "expr": "100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80",
                  "for": "5m",
                  "labels": {
                    "severity": "warning"
                  },
                  "annotations": {
                    "summary": "High CPU usage detected",
                    "description": "CPU usage is above 80% for 5 minutes"
                  }
                },
                {
                  "alert": "HighMemoryUsage",
                  "expr": "(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85",
                  "for": "5m",
                  "labels": {
                    "severity": "warning"
                  },
                  "annotations": {
                    "summary": "High memory usage detected",
                    "description": "Memory usage is above 85% for 5 minutes"
                  }
                },
                {
                  "alert": "HighDiskUsage",
                  "expr": "(node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100 > 90",
                  "for": "5m",
                  "labels": {
                    "severity": "critical"
                  },
                  "annotations": {
                    "summary": "High disk usage detected",
                    "description": "Disk usage is above 90% for 5 minutes"
                  }
                },
                {
                  "alert": "DockerContainerDown",
                  "expr": "absent(container_last_seen)",
                  "for": "1m",
                  "labels": {
                    "severity": "critical"
                  },
                  "annotations": {
                    "summary": "Docker container is down",
                    "description": "A Docker container has stopped running"
                  }
                }
              ]
            }
          ]
        },
        "commands": [
          "sudo tee /opt/ai-q/monitoring/prometheus/rules/alerts.yml << 'EOF'\ngroups:\n  - name: ai-q-system-alerts\n    rules:\n      - alert: HighCPUUsage\n        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: High CPU usage detected\n          description: CPU usage is above 80% for 5 minutes\n\n      - alert: HighMemoryUsage\n        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: High memory usage detected\n          description: Memory usage is above 85% for 5 minutes\n\n      - alert: HighDiskUsage\n        expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100 > 90\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: High disk usage detected\n          description: Disk usage is above 90% for 5 minutes\n\n      - alert: DockerContainerDown\n        expr: absent(container_last_seen)\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: Docker container is down\n          description: A Docker container has stopped running\nEOF"
        ],
        "verification": "Check alert rules file exists",
        "expected_output": "alerts.yml created with specified rules"
      },
      {
        "step_id": "01-02-01-04",
        "title": "Set Prometheus permissions",
        "description": "Set correct permissions for Prometheus directories",
        "commands": [
          "sudo chown -R 65534:65534 /opt/ai-q/monitoring/prometheus/",
          "sudo chmod -R 755 /opt/ai-q/monitoring/prometheus/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "All Prometheus directories have correct ownership (65534:65534)"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/monitoring/prometheus/",
      "cat /opt/ai-q/monitoring/prometheus/config/prometheus.yml"
    ],
    "expected_outputs": {
      "directories": "All Prometheus directories exist",
      "config_file": "prometheus.yml contains specified configuration",
      "permissions": "All files owned by user 65534:65534"
    }
  },
  "task_02_install_node_exporter": {
    "task_id": "01-02-02",
    "title": "Install Node Exporter",
    "description": "Install Node Exporter for system metrics collection",
    "estimated_duration": "20 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-02-02-01",
        "title": "Create Node Exporter configuration",
        "description": "Create Node Exporter configuration file",
        "config_file": "/opt/ai-q/monitoring/node-exporter/config.yml",
        "config_content": {
          "modules": {
            "node_exporter_textfile": {
              "procs": {
                "enabled_collectors": ["cpu", "diskstats", "filesystem", "loadavg", "meminfo", "netdev", "netstat", "textfile", "time", "vmstat"]
              }
            }
          }
        },
        "commands": [
          "sudo mkdir -p /opt/ai-q/monitoring/node-exporter",
          "sudo tee /opt/ai-q/monitoring/node-exporter/config.yml << 'EOF'\nmodules:\n  node_exporter_textfile:\n    procs:\n      enabled_collectors:\n        - cpu\n        - diskstats\n        - filesystem\n        - loadavg\n        - meminfo\n        - netdev\n        - netstat\n        - textfile\n        - time\n        - vmstat\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "Node Exporter configuration created successfully"
      },
      {
        "step_id": "01-02-02-02",
        "title": "Set Node Exporter permissions",
        "description": "Set correct permissions for Node Exporter",
        "commands": [
          "sudo chown -R 65534:65534 /opt/ai-q/monitoring/node-exporter/",
          "sudo chmod -R 755 /opt/ai-q/monitoring/node-exporter/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "Node Exporter directories have correct ownership"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/monitoring/node-exporter/",
      "cat /opt/ai-q/monitoring/node-exporter/config.yml"
    ],
    "expected_outputs": {
      "config_file": "config.yml contains specified configuration",
      "permissions": "Files owned by user 65534:65534"
    }
  },
  "task_03_install_alertmanager": {
    "task_id": "01-02-03",
    "title": "Install Alert Manager",
    "description": "Install Alert Manager for alert routing and notification",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-02-03-01",
        "title": "Create Alert Manager configuration directory",
        "description": "Create directory structure for Alert Manager",
        "commands": [
          "sudo mkdir -p /opt/ai-q/monitoring/alertmanager/config",
          "sudo mkdir -p /opt/ai-q/monitoring/alertmanager/data"
        ],
        "verification": "Check directories created",
        "expected_output": "Alert Manager directories created successfully"
      },
      {
        "step_id": "01-02-03-02",
        "title": "Create Alert Manager configuration",
        "description": "Create alertmanager.yml with notification configuration",
        "config_file": "/opt/ai-q/monitoring/alertmanager/config/alertmanager.yml",
        "config_content": {
          "global": {
            "smtp_smarthost": "localhost:587",
            "smtp_from": "alertmanager@ai-q.local"
          },
          "route": {
            "group_by": ["alertname", "cluster", "service"],
            "group_wait": "30s",
            "group_interval": "5m",
            "repeat_interval": "4h",
            "receiver": "web.hook"
          },
          "receivers": [
            {
              "name": "web.hook",
              "webhook_configs": [
                {
                  "url": "http://127.0.0.1:5001/"
                }
              ]
            }
          ],
          "inhibit_rules": [
            {
              "source_match": {
                "severity": "critical"
              },
              "target_match": {
                "severity": "warning"
              },
              "equal": ["alertname", "dev", "instance"]
            }
          ]
        },
        "commands": [
          "sudo tee /opt/ai-q/monitoring/alertmanager/config/alertmanager.yml << 'EOF'\nglobal:\n  smtp_smarthost: localhost:587\n  smtp_from: alertmanager@ai-q.local\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 4h\n  receiver: web.hook\n\nreceivers:\n  - name: web.hook\n    webhook_configs:\n      - url: http://127.0.0.1:5001/\n\ninhibit_rules:\n  - source_match:\n      severity: critical\n    target_match:\n      severity: warning\n    equal: ['alertname', 'dev', 'instance']\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "alertmanager.yml created with specified configuration"
      },
      {
        "step_id": "01-02-03-03",
        "title": "Set Alert Manager permissions",
        "description": "Set correct permissions for Alert Manager",
        "commands": [
          "sudo chown -R 65534:65534 /opt/ai-q/monitoring/alertmanager/",
          "sudo chmod -R 755 /opt/ai-q/monitoring/alertmanager/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "Alert Manager directories have correct ownership"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/monitoring/alertmanager/",
      "cat /opt/ai-q/monitoring/alertmanager/config/alertmanager.yml"
    ],
    "expected_outputs": {
      "config_file": "alertmanager.yml contains specified configuration",
      "permissions": "Files owned by user 65534:65534"
    }
  },
  "task_04_install_grafana": {
    "task_id": "01-02-04",
    "title": "Install Grafana",
    "description": "Install Grafana for visualization and dashboarding",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-02-04-01",
        "title": "Create Grafana configuration directory",
        "description": "Create directory structure for Grafana",
        "commands": [
          "sudo mkdir -p /opt/ai-q/monitoring/grafana/config",
          "sudo mkdir -p /opt/ai-q/monitoring/grafana/data",
          "sudo mkdir -p /opt/ai-q/monitoring/grafana/provisioning/datasources",
          "sudo mkdir -p /opt/ai-q/monitoring/grafana/provisioning/dashboards"
        ],
        "verification": "Check directories created",
        "expected_output": "All Grafana directories created successfully"
      },
      {
        "step_id": "01-02-04-02",
        "title": "Create Grafana configuration",
        "description": "Create grafana.ini with exact configuration",
        "config_file": "/opt/ai-q/monitoring/grafana/config/grafana.ini",
        "config_content": {
          "server": {
            "http_port": 3000,
            "domain": "localhost",
            "root_url": "http://localhost:3000/"
          },
          "database": {
            "type": "sqlite3",
            "path": "/var/lib/grafana/grafana.db"
          },
          "security": {
            "admin_user": "admin",
            "admin_password": "admin",
            "secret_key": "SW2YcwTIb9zpOOhoPsMm"
          },
          "users": {
            "allow_sign_up": false,
            "allow_org_create": false
          },
          "auth.anonymous": {
            "enabled": false
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/monitoring/grafana/config/grafana.ini << 'EOF'\n[server]\nhttp_port = 3000\ndomain = localhost\nroot_url = http://localhost:3000/\n\n[database]\ntype = sqlite3\npath = /var/lib/grafana/grafana.db\n\n[security]\nadmin_user = admin\nadmin_password = admin\nsecret_key = SW2YcwTIb9zpOOhoPsMm\n\n[users]\nallow_sign_up = false\nallow_org_create = false\n\n[auth.anonymous]\nenabled = false\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "grafana.ini created with specified configuration"
      },
      {
        "step_id": "01-02-04-03",
        "title": "Create Prometheus datasource configuration",
        "description": "Create datasource configuration for Prometheus",
        "config_file": "/opt/ai-q/monitoring/grafana/provisioning/datasources/prometheus.yml",
        "config_content": {
          "apiVersion": 1,
          "datasources": [
            {
              "name": "Prometheus",
              "type": "prometheus",
              "url": "http://prometheus:9090",
              "access": "proxy",
              "isDefault": true
            }
          ]
        },
        "commands": [
          "sudo tee /opt/ai-q/monitoring/grafana/provisioning/datasources/prometheus.yml << 'EOF'\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://prometheus:9090\n    access: proxy\n    isDefault: true\nEOF"
        ],
        "verification": "Check datasource configuration exists",
        "expected_output": "prometheus.yml created with specified configuration"
      },
      {
        "step_id": "01-02-04-04",
        "title": "Set Grafana permissions",
        "description": "Set correct permissions for Grafana",
        "commands": [
          "sudo chown -R 472:472 /opt/ai-q/monitoring/grafana/",
          "sudo chmod -R 755 /opt/ai-q/monitoring/grafana/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "Grafana directories have correct ownership (472:472)"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/monitoring/grafana/",
      "cat /opt/ai-q/monitoring/grafana/config/grafana.ini"
    ],
    "expected_outputs": {
      "config_file": "grafana.ini contains specified configuration",
      "datasource": "prometheus.yml contains Prometheus datasource",
      "permissions": "Files owned by user 472:472"
    }
  },
  "task_05_create_docker_compose": {
    "task_id": "01-02-05",
    "title": "Create Docker Compose for Monitoring Stack",
    "description": "Create docker-compose.yml for all monitoring services",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-02-05-01",
        "title": "Create monitoring docker-compose.yml",
        "description": "Create complete docker-compose.yml for monitoring stack",
        "config_file": "/opt/ai-q/docker/compose/monitoring-stack.yml",
        "config_content": {
          "version": "3.8",
          "services": {
            "prometheus": {
              "image": "prom/prometheus:v2.45.0",
              "container_name": "ai-q-prometheus",
              "ports": ["9090:9090"],
              "volumes": [
                "/opt/ai-q/monitoring/prometheus/config:/etc/prometheus",
                "/opt/ai-q/monitoring/prometheus/data:/prometheus",
                "/opt/ai-q/monitoring/prometheus/rules:/etc/prometheus/rules"
              ],
              "command": [
                "--config.file=/etc/prometheus/prometheus.yml",
                "--storage.tsdb.path=/prometheus",
                "--web.console.libraries=/etc/prometheus/console_libraries",
                "--web.console.templates=/etc/prometheus/consoles",
                "--storage.tsdb.retention.time=200h",
                "--web.enable-lifecycle"
              ],
              "networks": ["ai-q-monitoring"],
              "restart": "unless-stopped"
            },
            "alertmanager": {
              "image": "prom/alertmanager:v0.25.0",
              "container_name": "ai-q-alertmanager",
              "ports": ["9093:9093"],
              "volumes": [
                "/opt/ai-q/monitoring/alertmanager/config:/etc/alertmanager",
                "/opt/ai-q/monitoring/alertmanager/data:/alertmanager"
              ],
              "command": [
                "--config.file=/etc/alertmanager/alertmanager.yml",
                "--storage.path=/alertmanager"
              ],
              "networks": ["ai-q-monitoring"],
              "restart": "unless-stopped"
            },
            "grafana": {
              "image": "grafana/grafana:10.0.0",
              "container_name": "ai-q-grafana",
              "ports": ["3000:3000"],
              "volumes": [
                "/opt/ai-q/monitoring/grafana/config/grafana.ini:/etc/grafana/grafana.ini",
                "/opt/ai-q/monitoring/grafana/data:/var/lib/grafana",
                "/opt/ai-q/monitoring/grafana/provisioning:/etc/grafana/provisioning"
              ],
              "environment": [
                "GF_SECURITY_ADMIN_PASSWORD=admin"
              ],
              "networks": ["ai-q-monitoring"],
              "restart": "unless-stopped"
            },
            "node-exporter": {
              "image": "prom/node-exporter:v1.6.0",
              "container_name": "ai-q-node-exporter",
              "ports": ["9100:9100"],
              "volumes": [
                "/proc:/host/proc:ro",
                "/sys:/host/sys:ro",
                "/:/rootfs:ro"
              ],
              "command": [
                "--path.procfs=/host/proc",
                "--path.sysfs=/host/sys",
                "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
              ],
              "networks": ["ai-q-monitoring"],
              "restart": "unless-stopped"
            },
            "cadvisor": {
              "image": "gcr.io/cadvisor/cadvisor:v0.47.0",
              "container_name": "ai-q-cadvisor",
              "ports": ["8080:8080"],
              "volumes": [
                "/:/rootfs:ro",
                "/var/run:/var/run:ro",
                "/sys:/sys:ro",
                "/var/lib/docker/:/var/lib/docker:ro",
                "/dev/disk/:/dev/disk:ro"
              ],
              "privileged": true,
              "networks": ["ai-q-monitoring"],
              "restart": "unless-stopped"
            }
          },
          "networks": {
            "ai-q-monitoring": {
              "external": true
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/docker/compose/monitoring-stack.yml << 'EOF'\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:v2.45.0\n    container_name: ai-q-prometheus\n    ports:\n      - 9090:9090\n    volumes:\n      - /opt/ai-q/monitoring/prometheus/config:/etc/prometheus\n      - /opt/ai-q/monitoring/prometheus/data:/prometheus\n      - /opt/ai-q/monitoring/prometheus/rules:/etc/prometheus/rules\n    command:\n      - --config.file=/etc/prometheus/prometheus.yml\n      - --storage.tsdb.path=/prometheus\n      - --web.console.libraries=/etc/prometheus/console_libraries\n      - --web.console.templates=/etc/prometheus/consoles\n      - --storage.tsdb.retention.time=200h\n      - --web.enable-lifecycle\n    networks:\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  alertmanager:\n    image: prom/alertmanager:v0.25.0\n    container_name: ai-q-alertmanager\n    ports:\n      - 9093:9093\n    volumes:\n      - /opt/ai-q/monitoring/alertmanager/config:/etc/alertmanager\n      - /opt/ai-q/monitoring/alertmanager/data:/alertmanager\n    command:\n      - --config.file=/etc/alertmanager/alertmanager.yml\n      - --storage.path=/alertmanager\n    networks:\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  grafana:\n    image: grafana/grafana:10.0.0\n    container_name: ai-q-grafana\n    ports:\n      - 3000:3000\n    volumes:\n      - /opt/ai-q/monitoring/grafana/config/grafana.ini:/etc/grafana/grafana.ini\n      - /opt/ai-q/monitoring/grafana/data:/var/lib/grafana\n      - /opt/ai-q/monitoring/grafana/provisioning:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    networks:\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  node-exporter:\n    image: prom/node-exporter:v1.6.0\n    container_name: ai-q-node-exporter\n    ports:\n      - 9100:9100\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - --path.procfs=/host/proc\n      - --path.sysfs=/host/sys\n      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)\n    networks:\n      - ai-q-monitoring\n    restart: unless-stopped\n\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor:v0.47.0\n    container_name: ai-q-cadvisor\n    ports:\n      - 8080:8080\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:ro\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n      - /dev/disk/:/dev/disk:ro\n    privileged: true\n    networks:\n      - ai-q-monitoring\n    restart: unless-stopped\n\nnetworks:\n  ai-q-monitoring:\n    external: true\nEOF"
        ],
        "verification": "Check docker-compose file exists",
        "expected_output": "monitoring-stack.yml created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/docker/compose/monitoring-stack.yml",
      "docker-compose -f /opt/ai-q/docker/compose/monitoring-stack.yml config"
    ],
    "expected_outputs": {
      "config_valid": "Docker Compose configuration is valid",
      "services": "All 5 monitoring services defined"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Monitoring Stack Verification",
      "description": "Run comprehensive tests to verify all monitoring components",
      "test_commands": [
        "docker-compose -f /opt/ai-q/docker/compose/monitoring-stack.yml up -d",
        "sleep 30",
        "curl -s http://localhost:9090/api/v1/status/config",
        "curl -s http://localhost:3000/api/health",
        "curl -s http://localhost:9100/metrics",
        "curl -s http://localhost:8080/metrics",
        "curl -s http://localhost:9093/api/v1/status"
      ],
      "expected_results": {
        "prometheus": "Returns configuration status",
        "grafana": "Returns health status",
        "node_exporter": "Returns system metrics",
        "cadvisor": "Returns container metrics",
        "alertmanager": "Returns status information"
      }
    }
  },
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Prometheus cannot scrape targets",
        "symptoms": "Targets show as down in Prometheus UI",
        "solution": "Check network connectivity and target availability",
        "commands": [
          "docker network inspect ai-q-monitoring",
          "docker logs ai-q-prometheus"
        ]
      },
      {
        "issue": "Grafana cannot connect to Prometheus",
        "symptoms": "Prometheus datasource shows as offline",
        "solution": "Check datasource configuration and network",
        "commands": [
          "cat /opt/ai-q/monitoring/grafana/provisioning/datasources/prometheus.yml",
          "docker logs ai-q-grafana"
        ]
      },
      {
        "issue": "Alert Manager not receiving alerts",
        "symptoms": "Alerts not showing in Alert Manager UI",
        "solution": "Check Prometheus alerting configuration",
        "commands": [
          "cat /opt/ai-q/monitoring/prometheus/config/prometheus.yml",
          "docker logs ai-q-alertmanager"
        ]
      }
    ]
  },
  "next_steps": {
    "next_sub_recipe": "01-03-logging-infrastructure",
    "prerequisites_completed": [
      "Prometheus installed and configured",
      "Node Exporter running",
      "Alert Manager configured",
      "Grafana installed with Prometheus datasource",
      "cAdvisor monitoring containers",
      "All services accessible via web UI"
    ],
    "readiness_check": "All verification commands pass successfully"
  }
} 
{
  "metadata": {
    "sub_recipe_id": "01-10-performance-optimization",
    "title": "Performance Optimization and Tuning - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T20:30:00Z",
    "purpose": "Exact step-by-step performance optimization implementation with zero ambiguity",
    "total_tasks": 15,
    "estimated_duration": "2 days",
    "complexity": "Advanced",
    "dependencies": ["01-01-docker-environment", "01-02-system-monitoring", "01-03-logging-infrastructure", "01-04-load-balancing", "01-05-service-discovery", "01-06-message-queue", "01-07-cache-layer", "01-08-backup-infrastructure", "01-09-security-hardening"],
    "performance_stack": ["Resource Limits", "Performance Tuning", "Optimization", "Monitoring", "Analysis"]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured",
      "01-01-03: Docker networks created",
      "01-02-01: Prometheus installed",
      "01-02-02: Node Exporter running",
      "01-02-03: Alert Manager configured",
      "01-02-04: Grafana installed",
      "01-03-01: Elasticsearch installed",
      "01-03-02: Logstash configured",
      "01-03-03: Kibana installed",
      "01-04-01: Nginx installed",
      "01-05-01: Consul server installed",
      "01-06-01: RabbitMQ server installed",
      "01-07-01: Redis server installed",
      "01-08-01: Backup scripts created",
      "01-09-01: Firewall configured"
    ],
    "system_requirements": {
      "cpu": "Minimum 4 cores for optimization",
      "ram": "Minimum 8GB for optimization",
      "storage": "Minimum 50GB for performance data",
      "network": "Access to all service networks"
    }
  },
  "task_01_configure_resource_limits": {
    "task_id": "01-10-01",
    "title": "Configure Resource Limits",
    "description": "Configure system resource limits for optimal performance",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-10-01-01",
        "title": "Create resource limits configuration",
        "description": "Create system resource limits configuration",
        "config_file": "/opt/ai-q/performance/limits.conf",
        "config_content": {
          "system_limits": {
            "file_descriptors": {
              "soft_limit": 65536,
              "hard_limit": 65536
            },
            "processes": {
              "soft_limit": 32768,
              "hard_limit": 32768
            },
            "memory": {
              "soft_limit": "unlimited",
              "hard_limit": "unlimited"
            },
            "cpu_time": {
              "soft_limit": "unlimited",
              "hard_limit": "unlimited"
            }
          },
          "docker_limits": {
            "memory": "4g",
            "cpus": "2.0",
            "pids": 1000,
            "ulimits": {
              "nofile": {
                "soft": 65536,
                "hard": 65536
              }
            }
          }
        },
        "commands": [
          "sudo mkdir -p /opt/ai-q/performance",
          "sudo tee /opt/ai-q/performance/limits.conf << 'EOF'\\n{\\n  \\\"system_limits\\\": {\\n    \\\"file_descriptors\\\": {\\n      \\\"soft_limit\\\": 65536,\\n      \\\"hard_limit\\\": 65536\\n    },\\n    \\\"processes\\\": {\\n      \\\"soft_limit\\\": 32768,\\n      \\\"hard_limit\\\": 32768\\n    },\\n    \\\"memory\\\": {\\n      \\\"soft_limit\\\": \\\"unlimited\\\",\\n      \\\"hard_limit\\\": \\\"unlimited\\\"\\n    },\\n    \\\"cpu_time\\\": {\\n      \\\"soft_limit\\\": \\\"unlimited\\\",\\n      \\\"hard_limit\\\": \\\"unlimited\\\"\\n    }\\n  },\\n  \\\"docker_limits\\\": {\\n    \\\"memory\\\": \\\"4g\\\",\\n    \\\"cpus\\\": \\\"2.0\\\",\\n    \\\"pids\\\": 1000,\\n    \\\"ulimits\\\": {\\n      \\\"nofile\\\": {\\n        \\\"soft\\\": 65536,\\n        \\\"hard\\\": 65536\\n      }\\n    }\\n  }\\n}\\nEOF"
        ],
        "verification": "Check resource limits configuration exists",
        "expected_output": "limits.conf created with specified configuration"
      },
      {
        "step_id": "01-10-01-02",
        "title": "Create limits setup script",
        "description": "Create script to apply resource limits",
        "config_file": "/opt/ai-q/performance/setup-limits.sh",
        "config_content": "#!/bin/bash\\n# Resource Limits Setup Script\\n\\n# Set system limits\\ncat >> /etc/security/limits.conf << EOF\\n# AI-Q Performance Limits\\n* soft nofile 65536\\n* hard nofile 65536\\n* soft nproc 32768\\n* hard nproc 32768\\nroot soft nofile 65536\\nroot hard nofile 65536\\nroot soft nproc 32768\\nroot hard nproc 32768\\nEOF\\n\\n# Set kernel parameters\\ncat >> /etc/sysctl.conf << EOF\\n# AI-Q Performance Tuning\\nfs.file-max = 65536\\nfs.inotify.max_user_watches = 524288\\nvm.swappiness = 10\\nvm.dirty_ratio = 15\\nvm.dirty_background_ratio = 5\\nnet.core.somaxconn = 65535\\nnet.core.netdev_max_backlog = 5000\\nnet.ipv4.tcp_max_syn_backlog = 65535\\nnet.ipv4.tcp_fin_timeout = 30\\nnet.ipv4.tcp_keepalive_time = 1200\\nnet.ipv4.tcp_max_tw_buckets = 2000000\\nEOF\\n\\n# Apply kernel parameters\\nsysctl -p\\n\\n# Set Docker daemon limits\\ncat >> /etc/docker/daemon.json << EOF\\n{\\n  \\\"default-ulimits\\\": {\\n    \\\"nofile\\\": {\\n      \\\"Hard\\\": 65536,\\n      \\\"Name\\\": \\\"nofile\\\",\\n      \\\"Soft\\\": 65536\\n    }\\n  },\\n  \\\"max-concurrent-downloads\\\": 10,\\n  \\\"max-concurrent-uploads\\\": 5\\n}\\nEOF\\n\\n# Restart Docker daemon\\nsystemctl restart docker\\n\\necho \\\"Resource limits configured successfully\\\"",
        "commands": [
          "sudo tee /opt/ai-q/performance/setup-limits.sh << 'EOF'\\n#!/bin/bash\\n# Resource Limits Setup Script\\n\\n# Set system limits\\ncat >> /etc/security/limits.conf << EOF\\n# AI-Q Performance Limits\\n* soft nofile 65536\\n* hard nofile 65536\\n* soft nproc 32768\\n* hard nproc 32768\\nroot soft nofile 65536\\nroot hard nofile 65536\\nroot soft nproc 32768\\nroot hard nproc 32768\\nEOF\\n\\n# Set kernel parameters\\ncat >> /etc/sysctl.conf << EOF\\n# AI-Q Performance Tuning\\nfs.file-max = 65536\\nfs.inotify.max_user_watches = 524288\\nvm.swappiness = 10\\nvm.dirty_ratio = 15\\nvm.dirty_background_ratio = 5\\nnet.core.somaxconn = 65535\\nnet.core.netdev_max_backlog = 5000\\nnet.ipv4.tcp_max_syn_backlog = 65535\\nnet.ipv4.tcp_fin_timeout = 30\\nnet.ipv4.tcp_keepalive_time = 1200\\nnet.ipv4.tcp_max_tw_buckets = 2000000\\nEOF\\n\\n# Apply kernel parameters\\nsysctl -p\\n\\n# Set Docker daemon limits\\ncat >> /etc/docker/daemon.json << EOF\\n{\\n  \\\"default-ulimits\\\": {\\n    \\\"nofile\\\": {\\n      \\\"Hard\\\": 65536,\\n      \\\"Name\\\": \\\"nofile\\\",\\n      \\\"Soft\\\": 65536\\n    }\\n  },\\n  \\\"max-concurrent-downloads\\\": 10,\\n  \\\"max-concurrent-uploads\\\": 5\\n}\\nEOF\\n\\n# Restart Docker daemon\\nsystemctl restart docker\\n\\necho \\\"Resource limits configured successfully\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/performance/setup-limits.sh"
        ],
        "verification": "Check limits setup script exists and is executable",
        "expected_output": "setup-limits.sh created and made executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/performance/",
      "cat /opt/ai-q/performance/limits.conf"
    ],
    "expected_outputs": {
      "limits_config": "limits.conf contains resource limits",
      "limits_script": "setup-limits.sh contains limits setup logic"
    }
  },
  "task_02_optimize_system_performance": {
    "task_id": "01-10-02",
    "title": "Optimize System Performance",
    "description": "Optimize system performance settings",
    "estimated_duration": "50 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-10-02-01",
        "title": "Create performance optimization script",
        "description": "Create script for system performance optimization",
        "config_file": "/opt/ai-q/performance/optimize-system.sh",
        "config_content": "#!/bin/bash\\n# System Performance Optimization Script\\n\\n# CPU Governor\\necho performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\\n\\n# I/O Scheduler\\necho 'ACTION==\\\"add|change\\\", KERNEL==\\\"sd[a-z]\\\", ATTR{queue/scheduler}=\\\"deadline\\\"' > /etc/udev/rules.d/60-scheduler.rules\\n\\n# Memory optimization\\necho 1 > /proc/sys/vm/drop_caches\\necho 2 > /proc/sys/vm/drop_caches\\necho 3 > /proc/sys/vm/drop_caches\\n\\n# Network optimization\\nnetdev_max_backlog=5000\\nsomaxconn=65535\\n\\n# Apply network optimizations\\nsysctl -w net.core.netdev_max_backlog=$netdev_max_backlog\\nsysctl -w net.core.somaxconn=$somaxconn\\n\\n# File system optimization\\nmount -o remount,noatime /\\n\\n# Docker optimization\\ncat > /etc/docker/daemon.json << EOF\\n{\\n  \\\"storage-driver\\\": \\\"overlay2\\\",\\n  \\\"storage-opts\\\": [\\n    \\\"overlay2.override_kernel_check=true\\\"\\n  ],\\n  \\\"log-driver\\\": \\\"json-file\\\",\\n  \\\"log-opts\\\": {\\n    \\\"max-size\\\": \\\"10m\\\",\\n    \\\"max-file\\\": \\\"3\\\"\\n  },\\n  \\\"default-ulimits\\\": {\\n    \\\"nofile\\\": {\\n      \\\"Hard\\\": 65536,\\n      \\\"Name\\\": \\\"nofile\\\",\\n      \\\"Soft\\\": 65536\\n    }\\n  }\\n}\\nEOF\\n\\n# Restart Docker\\nsystemctl restart docker\\n\\necho \\\"System performance optimization completed\\\"",
        "commands": [
          "sudo tee /opt/ai-q/performance/optimize-system.sh << 'EOF'\\n#!/bin/bash\\n# System Performance Optimization Script\\n\\n# CPU Governor\\necho performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\\n\\n# I/O Scheduler\\necho 'ACTION==\\\"add|change\\\", KERNEL==\\\"sd[a-z]\\\", ATTR{queue/scheduler}=\\\"deadline\\\"' > /etc/udev/rules.d/60-scheduler.rules\\n\\n# Memory optimization\\necho 1 > /proc/sys/vm/drop_caches\\necho 2 > /proc/sys/vm/drop_caches\\necho 3 > /proc/sys/vm/drop_caches\\n\\n# Network optimization\\nnetdev_max_backlog=5000\\nsomaxconn=65535\\n\\n# Apply network optimizations\\nsysctl -w net.core.netdev_max_backlog=$netdev_max_backlog\\nsysctl -w net.core.somaxconn=$somaxconn\\n\\n# File system optimization\\nmount -o remount,noatime /\\n\\n# Docker optimization\\ncat > /etc/docker/daemon.json << EOF\\n{\\n  \\\"storage-driver\\\": \\\"overlay2\\\",\\n  \\\"storage-opts\\\": [\\n    \\\"overlay2.override_kernel_check=true\\\"\\n  ],\\n  \\\"log-driver\\\": \\\"json-file\\\",\\n  \\\"log-opts\\\": {\\n    \\\"max-size\\\": \\\"10m\\\",\\n    \\\"max-file\\\": \\\"3\\\"\\n  },\\n  \\\"default-ulimits\\\": {\\n    \\\"nofile\\\": {\\n      \\\"Hard\\\": 65536,\\n      \\\"Name\\\": \\\"nofile\\\",\\n      \\\"Soft\\\": 65536\\n    }\\n  }\\n}\\nEOF\\n\\n# Restart Docker\\nsystemctl restart docker\\n\\necho \\\"System performance optimization completed\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/performance/optimize-system.sh"
        ],
        "verification": "Check optimization script exists and is executable",
        "expected_output": "optimize-system.sh created and made executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/performance/",
      "cat /opt/ai-q/performance/optimize-system.sh"
    ],
    "expected_outputs": {
      "optimization_script": "optimize-system.sh contains system optimization logic"
    }
  },
  "task_03_setup_performance_monitoring": {
    "task_id": "01-10-03",
    "title": "Setup Performance Monitoring",
    "description": "Setup comprehensive performance monitoring",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-10-03-01",
        "title": "Create performance monitoring script",
        "description": "Create script for performance monitoring and analysis",
        "config_file": "/opt/ai-q/performance/monitor-performance.sh",
        "config_content": "#!/bin/bash\\n# Performance Monitoring Script\\n\\nLOG_DIR=\\\"/opt/ai-q/performance/logs\\\"\\nREPORT_FILE=\\\"$LOG_DIR/performance-report-$(date +%Y%m%d_%H%M%S).json\\\"\\n\\nmkdir -p \\\"$LOG_DIR\\\"\\n\\n# Initialize report\\ncat > \\\"$REPORT_FILE\\\" << EOF\\n{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"metrics\\\": {\\nEOF\\n\\n# CPU Usage\\ncpu_usage=$(top -bn1 | grep \\\"Cpu(s)\\\" | awk '{print $2}' | cut -d'%' -f1)\\necho \\\"    \\\\\\\"cpu_usage\\\\\\\": $cpu_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Memory Usage\\nmemory_usage=$(free | grep Mem | awk '{printf \\\"%.2f\\\", $3/$2 * 100.0}')\\necho \\\"    \\\\\\\"memory_usage\\\\\\\": $memory_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Disk Usage\\ndisk_usage=$(df / | tail -1 | awk '{print $5}' | cut -d'%' -f1)\\necho \\\"    \\\\\\\"disk_usage\\\\\\\": $disk_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Network I/O\\nnetwork_rx=$(cat /proc/net/dev | grep eth0 | awk '{print $2}')\\nnetwork_tx=$(cat /proc/net/dev | grep eth0 | awk '{print $10}')\\necho \\\"    \\\\\\\"network_rx_bytes\\\\\\\": $network_rx,\\\" >> \\\"$REPORT_FILE\\\"\\necho \\\"    \\\\\\\"network_tx_bytes\\\\\\\": $network_tx,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Docker Stats\\ndocker_stats=$(docker stats --no-stream --format \\\"table {{.Container}}\\\\t{{.CPUPerc}}\\\\t{{.MemUsage}}\\\\t{{.NetIO}}\\\")\\necho \\\"    \\\\\\\"docker_stats\\\\\\\": \\\\\\\"$docker_stats\\\\\\\"\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Close JSON\\necho \\\"  }\\\" >> \\\"$REPORT_FILE\\\"\\necho \\\"}\\\" >> \\\"$REPORT_FILE\\\"\\n\\necho \\\"Performance report generated: $REPORT_FILE\\\"",
        "commands": [
          "sudo tee /opt/ai-q/performance/monitor-performance.sh << 'EOF'\\n#!/bin/bash\\n# Performance Monitoring Script\\n\\nLOG_DIR=\\\"/opt/ai-q/performance/logs\\\"\\nREPORT_FILE=\\\"$LOG_DIR/performance-report-$(date +%Y%m%d_%H%M%S).json\\\"\\n\\nmkdir -p \\\"$LOG_DIR\\\"\\n\\n# Initialize report\\ncat > \\\"$REPORT_FILE\\\" << EOF\\n{\\n  \\\"timestamp\\\": \\\"$(date -Iseconds)\\\",\\n  \\\"metrics\\\": {\\nEOF\\n\\n# CPU Usage\\ncpu_usage=$(top -bn1 | grep \\\"Cpu(s)\\\" | awk '{print $2}' | cut -d'%' -f1)\\necho \\\"    \\\\\\\"cpu_usage\\\\\\\": $cpu_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Memory Usage\\nmemory_usage=$(free | grep Mem | awk '{printf \\\"%.2f\\\", $3/$2 * 100.0}')\\necho \\\"    \\\\\\\"memory_usage\\\\\\\": $memory_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Disk Usage\\ndisk_usage=$(df / | tail -1 | awk '{print $5}' | cut -d'%' -f1)\\necho \\\"    \\\\\\\"disk_usage\\\\\\\": $disk_usage,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Network I/O\\nnetwork_rx=$(cat /proc/net/dev | grep eth0 | awk '{print $2}')\\nnetwork_tx=$(cat /proc/net/dev | grep eth0 | awk '{print $10}')\\necho \\\"    \\\\\\\"network_rx_bytes\\\\\\\": $network_rx,\\\" >> \\\"$REPORT_FILE\\\"\\necho \\\"    \\\\\\\"network_tx_bytes\\\\\\\": $network_tx,\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Docker Stats\\ndocker_stats=$(docker stats --no-stream --format \\\"table {{.Container}}\\\\t{{.CPUPerc}}\\\\t{{.MemUsage}}\\\\t{{.NetIO}}\\\")\\necho \\\"    \\\\\\\"docker_stats\\\\\\\": \\\\\\\"$docker_stats\\\\\\\"\\\" >> \\\"$REPORT_FILE\\\"\\n\\n# Close JSON\\necho \\\"  }\\\" >> \\\"$REPORT_FILE\\\"\\necho \\\"}\\\" >> \\\"$REPORT_FILE\\\"\\n\\necho \\\"Performance report generated: $REPORT_FILE\\\"\\nEOF",
          "sudo chmod +x /opt/ai-q/performance/monitor-performance.sh"
        ],
        "verification": "Check monitoring script exists and is executable",
        "expected_output": "monitor-performance.sh created and made executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/performance/",
      "cat /opt/ai-q/performance/monitor-performance.sh"
    ],
    "expected_outputs": {
      "monitoring_script": "monitor-performance.sh contains performance monitoring logic"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Performance Optimization Verification",
      "description": "Run comprehensive tests to verify performance optimizations",
      "test_commands": [
        "/opt/ai-q/performance/setup-limits.sh",
        "/opt/ai-q/performance/optimize-system.sh",
        "/opt/ai-q/performance/monitor-performance.sh",
        "cat /opt/ai-q/performance/logs/performance-report-$(date +%Y%m%d_%H%M%S).json",
        "ulimit -n",
        "sysctl fs.file-max"
      ],
      "expected_results": {
        "limits_applied": "Resource limits applied successfully",
        "optimization_complete": "System optimization completed",
        "performance_report": "Performance report generated successfully",
        "file_descriptors": "File descriptor limit is 65536",
        "kernel_parameters": "Kernel parameters applied correctly"
      }
    }
  },
  "next_steps": {
    "next_sub_recipe": "01-11-disaster-recovery",
    "prerequisites_completed": [
      "Resource limits configured and applied",
      "System performance optimized",
      "Performance monitoring setup",
      "Optimization testing completed",
      "All performance metrics collected",
      "System tuned for optimal performance"
    ],
    "readiness_check": "All verification commands pass successfully"
  }
} 
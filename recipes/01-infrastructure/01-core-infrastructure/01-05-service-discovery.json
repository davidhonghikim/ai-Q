{
  "metadata": {
    "sub_recipe_id": "01-05-service-discovery",
    "title": "Service Discovery and Configuration - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T18:00:00Z",
    "purpose": "Exact step-by-step Consul service discovery implementation with zero ambiguity",
    "total_tasks": 12,
    "estimated_duration": "1-2 days",
    "complexity": "Advanced",
    "dependencies": ["01-01-docker-environment", "01-02-system-monitoring", "01-03-logging-infrastructure", "01-04-load-balancing"],
    "service_discovery_stack": ["Consul", "Service Registry", "Configuration Management", "Health Checks", "DNS Resolution"]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured",
      "01-01-03: Docker networks created",
      "01-02-01: Prometheus installed",
      "01-02-02: Node Exporter running",
      "01-02-03: Alert Manager configured",
      "01-02-04: Grafana installed",
      "01-03-01: Elasticsearch installed",
      "01-03-02: Logstash configured",
      "01-03-03: Kibana installed",
      "01-04-01: Nginx installed",
      "01-04-02: SSL certificates configured"
    ],
    "system_requirements": {
      "cpu": "Minimum 2 cores for Consul",
      "ram": "Minimum 2GB for Consul",
      "storage": "Minimum 10GB for Consul data",
      "network": "Access to all service networks"
    }
  },
  "task_01_install_consul_server": {
    "task_id": "01-05-01",
    "title": "Install Consul Server",
    "description": "Install Consul server with exact configuration for service discovery",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-05-01-01",
        "title": "Create Consul configuration directory",
        "description": "Create directory structure for Consul",
        "commands": [
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/config",
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/data",
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/logs",
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/scripts"
        ],
        "verification": "Check directories created",
        "expected_output": "All Consul directories created successfully"
      },
      {
        "step_id": "01-05-01-02",
        "title": "Create Consul server configuration",
        "description": "Create consul.json with exact server configuration",
        "config_file": "/opt/ai-q/service-discovery/consul/config/consul.json",
        "config_content": {
          "datacenter": "ai-q-dc",
          "data_dir": "/consul/data",
          "log_level": "INFO",
          "node_name": "ai-q-consul-server",
          "server": true,
          "bootstrap_expect": 1,
          "client_addr": "0.0.0.0",
          "bind_addr": "0.0.0.0",
          "advertise_addr": "0.0.0.0",
          "ui_config": {
            "enabled": true
          },
          "connect": {
            "enabled": true
          },
          "ports": {
            "dns": 8600,
            "http": 8500,
            "https": -1,
            "grpc": 8502,
            "grpc_tls": -1,
            "serf_lan": 8301,
            "serf_wan": 8302,
            "server": 8300
          },
          "recursors": ["8.8.8.8", "8.8.4.4"],
          "disable_update_check": true,
          "enable_script_checks": true,
          "enable_local_script_checks": true
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/config/consul.json << 'EOF'\n{\n  \"datacenter\": \"ai-q-dc\",\n  \"data_dir\": \"/consul/data\",\n  \"log_level\": \"INFO\",\n  \"node_name\": \"ai-q-consul-server\",\n  \"server\": true,\n  \"bootstrap_expect\": 1,\n  \"client_addr\": \"0.0.0.0\",\n  \"bind_addr\": \"0.0.0.0\",\n  \"advertise_addr\": \"0.0.0.0\",\n  \"ui_config\": {\n    \"enabled\": true\n  },\n  \"connect\": {\n    \"enabled\": true\n  },\n  \"ports\": {\n    \"dns\": 8600,\n    \"http\": 8500,\n    \"https\": -1,\n    \"grpc\": 8502,\n    \"grpc_tls\": -1,\n    \"serf_lan\": 8301,\n    \"serf_wan\": 8302,\n    \"server\": 8300\n  },\n  \"recursors\": [\"8.8.8.8\", \"8.8.4.4\"],\n  \"disable_update_check\": true,\n  \"enable_script_checks\": true,\n  \"enable_local_script_checks\": true\n}\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "consul.json created with specified configuration"
      },
      {
        "step_id": "01-05-01-03",
        "title": "Create Consul ACL configuration",
        "description": "Create ACL configuration for security",
        "config_file": "/opt/ai-q/service-discovery/consul/config/acl.json",
        "config_content": {
          "acl": {
            "enabled": true,
            "default_policy": "deny",
            "enable_token_persistence": true,
            "tokens": {
              "master": "b1gs33cr3t",
              "agent": "b1gs33cr3t",
              "agent_master": "b1gs33cr3t",
              "replication": "b1gs33cr3t"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/config/acl.json << 'EOF'\n{\n  \"acl\": {\n    \"enabled\": true,\n    \"default_policy\": \"deny\",\n    \"enable_token_persistence\": true,\n    \"tokens\": {\n      \"master\": \"b1gs33cr3t\",\n      \"agent\": \"b1gs33cr3t\",\n      \"agent_master\": \"b1gs33cr3t\",\n      \"replication\": \"b1gs33cr3t\"\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check ACL configuration exists",
        "expected_output": "acl.json created with specified configuration"
      },
      {
        "step_id": "01-05-01-04",
        "title": "Set Consul permissions",
        "description": "Set correct permissions for Consul",
        "commands": [
          "sudo chown -R 100:100 /opt/ai-q/service-discovery/consul/",
          "sudo chmod -R 755 /opt/ai-q/service-discovery/consul/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "Consul directories have correct ownership (100:100)"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/service-discovery/consul/",
      "cat /opt/ai-q/service-discovery/consul/config/consul.json"
    ],
    "expected_outputs": {
      "config_file": "consul.json contains specified configuration",
      "acl_config": "acl.json contains ACL configuration",
      "permissions": "Files owned by user 100:100"
    }
  },
  "task_02_configure_service_registry": {
    "task_id": "01-05-02",
    "title": "Configure Service Registry",
    "description": "Configure service registry with health checks and service definitions",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-05-02-01",
        "title": "Create service definitions directory",
        "description": "Create directory for service definitions",
        "commands": [
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/services",
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/checks"
        ],
        "verification": "Check service directories created",
        "expected_output": "Service directories created successfully"
      },
      {
        "step_id": "01-05-02-02",
        "title": "Create frontend service definition",
        "description": "Create service definition for frontend service",
        "config_file": "/opt/ai-q/service-discovery/consul/services/frontend.json",
        "config_content": {
          "service": {
            "name": "frontend",
            "id": "frontend-1",
            "port": 3000,
            "tags": ["web", "frontend", "ai-q"],
            "meta": {
              "version": "1.0.0",
              "environment": "production"
            },
            "check": {
              "id": "frontend-health",
              "name": "Frontend Health Check",
              "http": "http://localhost:3000/health",
              "interval": "10s",
              "timeout": "5s",
              "deregistercriticalserviceafter": "30s"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/services/frontend.json << 'EOF'\n{\n  \"service\": {\n    \"name\": \"frontend\",\n    \"id\": \"frontend-1\",\n    \"port\": 3000,\n    \"tags\": [\"web\", \"frontend\", \"ai-q\"],\n    \"meta\": {\n      \"version\": \"1.0.0\",\n      \"environment\": \"production\"\n    },\n    \"check\": {\n      \"id\": \"frontend-health\",\n      \"name\": \"Frontend Health Check\",\n      \"http\": \"http://localhost:3000/health\",\n      \"interval\": \"10s\",\n      \"timeout\": \"5s\",\n      \"deregistercriticalserviceafter\": \"30s\"\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check frontend service definition exists",
        "expected_output": "frontend.json created with specified configuration"
      },
      {
        "step_id": "01-05-02-03",
        "title": "Create backend service definition",
        "description": "Create service definition for backend service",
        "config_file": "/opt/ai-q/service-discovery/consul/services/backend.json",
        "config_content": {
          "service": {
            "name": "backend",
            "id": "backend-1",
            "port": 8000,
            "tags": ["api", "backend", "ai-q"],
            "meta": {
              "version": "1.0.0",
              "environment": "production"
            },
            "check": {
              "id": "backend-health",
              "name": "Backend Health Check",
              "http": "http://localhost:8000/health",
              "interval": "10s",
              "timeout": "5s",
              "deregistercriticalserviceafter": "30s"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/services/backend.json << 'EOF'\n{\n  \"service\": {\n    \"name\": \"backend\",\n    \"id\": \"backend-1\",\n    \"port\": 8000,\n    \"tags\": [\"api\", \"backend\", \"ai-q\"],\n    \"meta\": {\n      \"version\": \"1.0.0\",\n      \"environment\": \"production\"\n    },\n    \"check\": {\n      \"id\": \"backend-health\",\n      \"name\": \"Backend Health Check\",\n      \"http\": \"http://localhost:8000/health\",\n      \"interval\": \"10s\",\n      \"timeout\": \"5s\",\n      \"deregistercriticalserviceafter\": \"30s\"\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check backend service definition exists",
        "expected_output": "backend.json created with specified configuration"
      },
      {
        "step_id": "01-05-02-04",
        "title": "Create database service definition",
        "description": "Create service definition for database service",
        "config_file": "/opt/ai-q/service-discovery/consul/services/database.json",
        "config_content": {
          "service": {
            "name": "database",
            "id": "postgresql-1",
            "port": 5432,
            "tags": ["database", "postgresql", "ai-q"],
            "meta": {
              "version": "15.0",
              "environment": "production"
            },
            "check": {
              "id": "database-health",
              "name": "Database Health Check",
              "tcp": "localhost:5432",
              "interval": "30s",
              "timeout": "10s",
              "deregistercriticalserviceafter": "60s"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/services/database.json << 'EOF'\n{\n  \"service\": {\n    \"name\": \"database\",\n    \"id\": \"postgresql-1\",\n    \"port\": 5432,\n    \"tags\": [\"database\", \"postgresql\", \"ai-q\"],\n    \"meta\": {\n      \"version\": \"15.0\",\n      \"environment\": \"production\"\n    },\n    \"check\": {\n      \"id\": \"database-health\",\n      \"name\": \"Database Health Check\",\n      \"tcp\": \"localhost:5432\",\n      \"interval\": \"30s\",\n      \"timeout\": \"10s\",\n      \"deregistercriticalserviceafter\": \"60s\"\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check database service definition exists",
        "expected_output": "database.json created with specified configuration"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/service-discovery/consul/services/",
      "cat /opt/ai-q/service-discovery/consul/services/frontend.json"
    ],
    "expected_outputs": {
      "frontend_service": "frontend.json contains service definition",
      "backend_service": "backend.json contains service definition",
      "database_service": "database.json contains service definition"
    }
  },
  "task_03_setup_configuration_management": {
    "task_id": "01-05-03",
    "title": "Setup Configuration Management",
    "description": "Setup key-value store for configuration management",
    "estimated_duration": "35 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-05-03-01",
        "title": "Create configuration keys directory",
        "description": "Create directory for configuration keys",
        "commands": [
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/config-keys",
          "sudo mkdir -p /opt/ai-q/service-discovery/consul/templates"
        ],
        "verification": "Check configuration directories created",
        "expected_output": "Configuration directories created successfully"
      },
      {
        "step_id": "01-05-03-02",
        "title": "Create database configuration keys",
        "description": "Create key-value pairs for database configuration",
        "config_file": "/opt/ai-q/service-discovery/consul/config-keys/database.json",
        "config_content": {
          "database": {
            "host": "postgresql",
            "port": 5432,
            "name": "ai_q_db",
            "user": "ai_q_user",
            "password": "ai_q_password",
            "ssl_mode": "require",
            "max_connections": 100,
            "connection_timeout": 30
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/config-keys/database.json << 'EOF'\n{\n  \"database\": {\n    \"host\": \"postgresql\",\n    \"port\": 5432,\n    \"name\": \"ai_q_db\",\n    \"user\": \"ai_q_user\",\n    \"password\": \"ai_q_password\",\n    \"ssl_mode\": \"require\",\n    \"max_connections\": 100,\n    \"connection_timeout\": 30\n  }\n}\nEOF"
        ],
        "verification": "Check database configuration exists",
        "expected_output": "database.json created with specified configuration"
      },
      {
        "step_id": "01-05-03-03",
        "title": "Create Redis configuration keys",
        "description": "Create key-value pairs for Redis configuration",
        "config_file": "/opt/ai-q/service-discovery/consul/config-keys/redis.json",
        "config_content": {
          "redis": {
            "host": "redis",
            "port": 6379,
            "password": "redis_password",
            "database": 0,
            "timeout": 5,
            "retry_on_timeout": true,
            "max_connections": 50
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/config-keys/redis.json << 'EOF'\n{\n  \"redis\": {\n    \"host\": \"redis\",\n    \"port\": 6379,\n    \"password\": \"redis_password\",\n    \"database\": 0,\n    \"timeout\": 5,\n    \"retry_on_timeout\": true,\n    \"max_connections\": 50\n  }\n}\nEOF"
        ],
        "verification": "Check Redis configuration exists",
        "expected_output": "redis.json created with specified configuration"
      },
      {
        "step_id": "01-05-03-04",
        "title": "Create application configuration keys",
        "description": "Create key-value pairs for application configuration",
        "config_file": "/opt/ai-q/service-discovery/consul/config-keys/application.json",
        "config_content": {
          "application": {
            "name": "ai-q",
            "version": "1.0.0",
            "environment": "production",
            "debug": false,
            "log_level": "info",
            "api": {
              "port": 5000,
              "host": "0.0.0.0",
              "cors_origins": ["https://ai-q.local"],
              "rate_limit": 100
            },
            "security": {
              "jwt_secret": "ai_q_jwt_secret_key",
              "bcrypt_rounds": 12,
              "session_timeout": 3600
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/service-discovery/consul/config-keys/application.json << 'EOF'\n{\n  \"application\": {\n    \"name\": \"ai-q\",\n    \"version\": \"1.0.0\",\n    \"environment\": \"production\",\n    \"debug\": false,\n    \"log_level\": \"info\",\n    \"api\": {\n      \"port\": 5000,\n      \"host\": \"0.0.0.0\",\n      \"cors_origins\": [\"https://ai-q.local\"],\n      \"rate_limit\": 100\n    },\n    \"security\": {\n      \"jwt_secret\": \"ai_q_jwt_secret_key\",\n      \"bcrypt_rounds\": 12,\n      \"session_timeout\": 3600\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check application configuration exists",
        "expected_output": "application.json created with specified configuration"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/service-discovery/consul/config-keys/",
      "cat /opt/ai-q/service-discovery/consul/config-keys/database.json"
    ],
    "expected_outputs": {
      "database_config": "database.json contains database configuration",
      "redis_config": "redis.json contains Redis configuration",
      "application_config": "application.json contains application configuration"
    }
  },
  "task_04_create_service_discovery_docker_compose": {
    "task_id": "01-05-04",
    "title": "Create Docker Compose for Service Discovery",
    "description": "Create docker-compose.yml for Consul service discovery",
    "estimated_duration": "25 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-05-04-01",
        "title": "Create service discovery docker-compose.yml",
        "description": "Create complete docker-compose.yml for Consul",
        "config_file": "/opt/ai-q/docker/compose/service-discovery.yml",
        "config_content": {
          "version": "3.8",
          "services": {
            "consul": {
              "image": "consul:1.16.0",
              "container_name": "ai-q-consul",
              "ports": ["8500:8500", "8600:8600/udp", "8600:8600/tcp", "8300:8300", "8301:8301", "8302:8302"],
              "volumes": [
                "/opt/ai-q/service-discovery/consul/config:/consul/config:ro",
                "/opt/ai-q/service-discovery/consul/data:/consul/data",
                "/opt/ai-q/service-discovery/consul/logs:/consul/logs",
                "/opt/ai-q/service-discovery/consul/services:/consul/services:ro"
              ],
              "environment": [
                "CONSUL_BIND_INTERFACE=eth0",
                "CONSUL_CLIENT_INTERFACE=eth0"
              ],
              "command": [
                "consul",
                "agent",
                "-server",
                "-bootstrap-expect=1",
                "-ui",
                "-client=0.0.0.0",
                "-data-dir=/consul/data",
                "-config-dir=/consul/config",
                "-config-dir=/consul/services"
              ],
              "networks": ["ai-q-frontend", "ai-q-backend", "ai-q-database", "ai-q-monitoring"],
              "restart": "unless-stopped"
            }
          },
          "networks": {
            "ai-q-frontend": {
              "external": true
            },
            "ai-q-backend": {
              "external": true
            },
            "ai-q-database": {
              "external": true
            },
            "ai-q-monitoring": {
              "external": true
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/docker/compose/service-discovery.yml << 'EOF'\nversion: '3.8'\n\nservices:\n  consul:\n    image: consul:1.16.0\n    container_name: ai-q-consul\n    ports:\n      - 8500:8500\n      - 8600:8600/udp\n      - 8600:8600/tcp\n      - 8300:8300\n      - 8301:8301\n      - 8302:8302\n    volumes:\n      - /opt/ai-q/service-discovery/consul/config:/consul/config:ro\n      - /opt/ai-q/service-discovery/consul/data:/consul/data\n      - /opt/ai-q/service-discovery/consul/logs:/consul/logs\n      - /opt/ai-q/service-discovery/consul/services:/consul/services:ro\n    environment:\n      - CONSUL_BIND_INTERFACE=eth0\n      - CONSUL_CLIENT_INTERFACE=eth0\n    command:\n      - consul\n      - agent\n      - -server\n      - -bootstrap-expect=1\n      - -ui\n      - -client=0.0.0.0\n      - -data-dir=/consul/data\n      - -config-dir=/consul/config\n      - -config-dir=/consul/services\n    networks:\n      - ai-q-frontend\n      - ai-q-backend\n      - ai-q-database\n      - ai-q-monitoring\n    restart: unless-stopped\n\nnetworks:\n  ai-q-frontend:\n    external: true\n  ai-q-backend:\n    external: true\n  ai-q-database:\n    external: true\n  ai-q-monitoring:\n    external: true\nEOF"
        ],
        "verification": "Check docker-compose file exists",
        "expected_output": "service-discovery.yml created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/docker/compose/service-discovery.yml",
      "docker-compose -f /opt/ai-q/docker/compose/service-discovery.yml config"
    ],
    "expected_outputs": {
      "config_valid": "Docker Compose configuration is valid",
      "services": "Consul service defined with all networks"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Service Discovery Verification",
      "description": "Run comprehensive tests to verify Consul service discovery",
      "test_commands": [
        "docker-compose -f /opt/ai-q/docker/compose/service-discovery.yml up -d",
        "sleep 30",
        "curl -s http://localhost:8500/v1/status/leader",
        "curl -s http://localhost:8500/v1/catalog/services",
        "curl -s http://localhost:8500/v1/agent/services",
        "dig @localhost -p 8600 frontend.service.consul",
        "dig @localhost -p 8600 backend.service.consul",
        "dig @localhost -p 8600 database.service.consul"
      ],
      "expected_results": {
        "consul_leader": "Returns leader information",
        "catalog_services": "Returns registered services",
        "agent_services": "Returns agent services",
        "frontend_dns": "Resolves frontend service",
        "backend_dns": "Resolves backend service",
        "database_dns": "Resolves database service"
      }
    }
  },
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Consul fails to start",
        "symptoms": "Consul container exits with error",
        "solution": "Check configuration and permissions",
        "commands": [
          "docker logs ai-q-consul",
          "ls -la /opt/ai-q/service-discovery/consul/",
          "cat /opt/ai-q/service-discovery/consul/config/consul.json"
        ]
      },
      {
        "issue": "Services not registering",
        "symptoms": "Services not appearing in Consul UI",
        "solution": "Check service definitions and network connectivity",
        "commands": [
          "docker network inspect ai-q-frontend",
          "cat /opt/ai-q/service-discovery/consul/services/frontend.json",
          "curl -s http://localhost:8500/v1/agent/services"
        ]
      },
      {
        "issue": "DNS resolution not working",
        "symptoms": "Cannot resolve service names",
        "solution": "Check DNS configuration and service registration",
        "commands": [
          "dig @localhost -p 8600 frontend.service.consul",
          "curl -s http://localhost:8500/v1/catalog/services",
          "docker logs ai-q-consul"
        ]
      }
    ]
  },
  "next_steps": {
    "next_sub_recipe": "01-06-message-queue",
    "prerequisites_completed": [
      "Consul server installed and running",
      "Service registry configured",
      "Service definitions created",
      "Configuration keys defined",
      "DNS resolution working",
      "All services discoverable"
    ],
    "readiness_check": "All verification commands pass successfully"
  }
} 
{
  "metadata": {
    "sub_recipe_id": "01-08-backup-infrastructure",
    "title": "Backup and Recovery System - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T19:30:00Z",
    "purpose": "Exact step-by-step backup infrastructure implementation with zero ambiguity",
    "total_tasks": 12,
    "estimated_duration": "1-2 days",
    "complexity": "Advanced",
    "dependencies": ["01-01-docker-environment", "01-02-system-monitoring", "01-03-logging-infrastructure", "01-04-load-balancing", "01-05-service-discovery", "01-06-message-queue", "01-07-cache-layer"],
    "backup_stack": ["Automated Scripts", "Versioning", "Recovery Procedures", "Monitoring", "Testing"]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured",
      "01-01-03: Docker networks created",
      "01-02-01: Prometheus installed",
      "01-02-02: Node Exporter running",
      "01-02-03: Alert Manager configured",
      "01-02-04: Grafana installed",
      "01-03-01: Elasticsearch installed",
      "01-03-02: Logstash configured",
      "01-03-03: Kibana installed",
      "01-04-01: Nginx installed",
      "01-05-01: Consul server installed",
      "01-06-01: RabbitMQ server installed",
      "01-07-01: Redis server installed"
    ],
    "system_requirements": {
      "cpu": "Minimum 2 cores for backup operations",
      "ram": "Minimum 4GB for backup operations",
      "storage": "Minimum 100GB for backup storage",
      "network": "Access to all service networks"
    }
  },
  "task_01_create_backup_scripts": {
    "task_id": "01-08-01",
    "title": "Create Automated Backup Scripts",
    "description": "Create comprehensive backup scripts for all system components",
    "estimated_duration": "60 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-08-01-01",
        "title": "Create backup directory structure",
        "description": "Create directory structure for backup operations",
        "commands": [
          "sudo mkdir -p /opt/ai-q/backup/scripts",
          "sudo mkdir -p /opt/ai-q/backup/data",
          "sudo mkdir -p /opt/ai-q/backup/logs",
          "sudo mkdir -p /opt/ai-q/backup/config",
          "sudo mkdir -p /opt/ai-q/backup/schedules"
        ],
        "verification": "Check directories created",
        "expected_output": "All backup directories created successfully"
      },
      {
        "step_id": "01-08-01-02",
        "title": "Create main backup script",
        "description": "Create comprehensive backup script for all components",
        "config_file": "/opt/ai-q/backup/scripts/backup-all.sh",
        "config_content": "#!/bin/bash\n# AI-Q Complete System Backup Script\n\nBACKUP_DIR=\"/opt/ai-q/backup/data\"\nLOG_DIR=\"/opt/ai-q/backup/logs\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_NAME=\"ai-q-backup-$DATE\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR/$BACKUP_NAME\"\n\n# Log function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_DIR/backup-$DATE.log\"\n}\n\nlog \"Starting AI-Q system backup\"\n\n# Database backups\nlog \"Backing up PostgreSQL databases\"\ndocker exec ai-q-postgresql pg_dumpall -U ai_q_user > \"$BACKUP_DIR/$BACKUP_NAME/postgresql-full.sql\"\n\n# Redis backup\nlog \"Backing up Redis data\"\ndocker exec ai-q-redis-master redis-cli BGSAVE\nsleep 10\ndocker cp ai-q-redis-master:/data/dump.rdb \"$BACKUP_DIR/$BACKUP_NAME/redis-dump.rdb\"\n\n# Elasticsearch backup\nlog \"Backing up Elasticsearch indices\"\ncurl -X PUT \"localhost:9200/_snapshot/ai-q-backup/snapshot-$DATE?wait_for_completion=true\"\n\n# Configuration backups\nlog \"Backing up configuration files\"\ntar -czf \"$BACKUP_DIR/$BACKUP_NAME/configs.tar.gz\" -C /opt/ai-q .\n\n# Docker volumes backup\nlog \"Backing up Docker volumes\"\ndocker run --rm -v ai-q-data:/data -v \"$BACKUP_DIR/$BACKUP_NAME\":/backup alpine tar czf /backup/volumes.tar.gz -C /data .\n\n# Create backup manifest\ncat > \"$BACKUP_DIR/$BACKUP_NAME/manifest.json\" << EOF\n{\n  \"backup_name\": \"$BACKUP_NAME\",\n  \"timestamp\": \"$(date -Iseconds)\",\n  \"components\": [\n    \"postgresql\",\n    \"redis\",\n    \"elasticsearch\",\n    \"configurations\",\n    \"docker_volumes\"\n  ],\n  \"size\": \"$(du -sh $BACKUP_DIR/$BACKUP_NAME | cut -f1)\"\n}\nEOF\n\nlog \"Backup completed successfully: $BACKUP_NAME\"\n\n# Cleanup old backups (keep last 7 days)\nfind \"$BACKUP_DIR\" -name \"ai-q-backup-*\" -type d -mtime +7 -exec rm -rf {} \\;\n\nlog \"Backup cleanup completed\"",
        "commands": [
          "sudo tee /opt/ai-q/backup/scripts/backup-all.sh << 'EOF'\n#!/bin/bash\n# AI-Q Complete System Backup Script\n\nBACKUP_DIR=\"/opt/ai-q/backup/data\"\nLOG_DIR=\"/opt/ai-q/backup/logs\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_NAME=\"ai-q-backup-$DATE\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR/$BACKUP_NAME\"\n\n# Log function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_DIR/backup-$DATE.log\"\n}\n\nlog \"Starting AI-Q system backup\"\n\n# Database backups\nlog \"Backing up PostgreSQL databases\"\ndocker exec ai-q-postgresql pg_dumpall -U ai_q_user > \"$BACKUP_DIR/$BACKUP_NAME/postgresql-full.sql\"\n\n# Redis backup\nlog \"Backing up Redis data\"\ndocker exec ai-q-redis-master redis-cli BGSAVE\nsleep 10\ndocker cp ai-q-redis-master:/data/dump.rdb \"$BACKUP_DIR/$BACKUP_NAME/redis-dump.rdb\"\n\n# Elasticsearch backup\nlog \"Backing up Elasticsearch indices\"\ncurl -X PUT \"localhost:9200/_snapshot/ai-q-backup/snapshot-$DATE?wait_for_completion=true\"\n\n# Configuration backups\nlog \"Backing up configuration files\"\ntar -czf \"$BACKUP_DIR/$BACKUP_NAME/configs.tar.gz\" -C /opt/ai-q .\n\n# Docker volumes backup\nlog \"Backing up Docker volumes\"\ndocker run --rm -v ai-q-data:/data -v \"$BACKUP_DIR/$BACKUP_NAME\":/backup alpine tar czf /backup/volumes.tar.gz -C /data .\n\n# Create backup manifest\ncat > \"$BACKUP_DIR/$BACKUP_NAME/manifest.json\" << EOF\n{\n  \"backup_name\": \"$BACKUP_NAME\",\n  \"timestamp\": \"$(date -Iseconds)\",\n  \"components\": [\n    \"postgresql\",\n    \"redis\",\n    \"elasticsearch\",\n    \"configurations\",\n    \"docker_volumes\"\n  ],\n  \"size\": \"$(du -sh $BACKUP_DIR/$BACKUP_NAME | cut -f1)\"\n}\nEOF\n\nlog \"Backup completed successfully: $BACKUP_NAME\"\n\n# Cleanup old backups (keep last 7 days)\nfind \"$BACKUP_DIR\" -name \"ai-q-backup-*\" -type d -mtime +7 -exec rm -rf {} \\;\n\nlog \"Backup cleanup completed\"\nEOF",
          "sudo chmod +x /opt/ai-q/backup/scripts/backup-all.sh"
        ],
        "verification": "Check backup script exists and is executable",
        "expected_output": "backup-all.sh created and made executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/backup/scripts/",
      "cat /opt/ai-q/backup/scripts/backup-all.sh"
    ],
    "expected_outputs": {
      "backup_script": "backup-all.sh contains complete backup logic",
      "executable": "Script is executable"
    }
  },
  "task_02_setup_backup_versioning": {
    "task_id": "01-08-02",
    "title": "Setup Backup Versioning and Retention",
    "description": "Setup backup versioning and retention policies",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-08-02-01",
        "title": "Create versioning configuration",
        "description": "Create backup versioning and retention configuration",
        "config_file": "/opt/ai-q/backup/config/retention.conf",
        "config_content": {
          "retention_policy": {
            "daily_backups": 7,
            "weekly_backups": 4,
            "monthly_backups": 12,
            "yearly_backups": 5,
            "compression": "gzip",
            "encryption": "aes-256-gcm",
            "verification": true
          },
          "storage_tiers": {
            "hot_storage": {
              "path": "/opt/ai-q/backup/data",
              "retention_days": 7,
              "compression": "gzip"
            },
            "warm_storage": {
              "path": "/opt/ai-q/backup/archive",
              "retention_days": 30,
              "compression": "bzip2"
            },
            "cold_storage": {
              "path": "/opt/ai-q/backup/longterm",
              "retention_days": 365,
              "compression": "xz"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/backup/config/retention.conf << 'EOF'\n{\n  \"retention_policy\": {\n    \"daily_backups\": 7,\n    \"weekly_backups\": 4,\n    \"monthly_backups\": 12,\n    \"yearly_backups\": 5,\n    \"compression\": \"gzip\",\n    \"encryption\": \"aes-256-gcm\",\n    \"verification\": true\n  },\n  \"storage_tiers\": {\n    \"hot_storage\": {\n      \"path\": \"/opt/ai-q/backup/data\",\n      \"retention_days\": 7,\n      \"compression\": \"gzip\"\n    },\n    \"warm_storage\": {\n      \"path\": \"/opt/ai-q/backup/archive\",\n      \"retention_days\": 30,\n      \"compression\": \"bzip2\"\n    },\n    \"cold_storage\": {\n      \"path\": \"/opt/ai-q/backup/longterm\",\n      \"retention_days\": 365,\n      \"compression\": \"xz\"\n    }\n  }\n}\nEOF"
        ],
        "verification": "Check retention configuration exists",
        "expected_output": "retention.conf created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/backup/config/retention.conf"
    ],
    "expected_outputs": {
      "retention_config": "retention.conf contains versioning policy"
    }
  },
  "task_03_create_recovery_procedures": {
    "task_id": "01-08-03",
    "title": "Create Recovery Procedures",
    "description": "Create detailed recovery procedures for all components",
    "estimated_duration": "50 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-08-03-01",
        "title": "Create recovery script",
        "description": "Create comprehensive recovery script",
        "config_file": "/opt/ai-q/backup/scripts/recover-all.sh",
        "config_content": "#!/bin/bash\n# AI-Q Complete System Recovery Script\n\nBACKUP_DIR=\"/opt/ai-q/backup/data\"\nLOG_DIR=\"/opt/ai-q/backup/logs\"\n\nif [ $# -eq 0 ]; then\n    echo \"Usage: $0 <backup-name>\"\n    echo \"Available backups:\"\n    ls -1 \"$BACKUP_DIR\" | grep ai-q-backup-\n    exit 1\nfi\n\nBACKUP_NAME=$1\nBACKUP_PATH=\"$BACKUP_DIR/$BACKUP_NAME\"\n\nif [ ! -d \"$BACKUP_PATH\" ]; then\n    echo \"Backup $BACKUP_NAME not found\"\n    exit 1\nfi\n\n# Log function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_DIR/recovery-$BACKUP_NAME.log\"\n}\n\nlog \"Starting recovery from backup: $BACKUP_NAME\"\n\n# Stop services\nlog \"Stopping AI-Q services\"\ndocker-compose -f /opt/ai-q/docker/compose/ai-q-stack.yml down\n\n# Restore PostgreSQL\nlog \"Restoring PostgreSQL databases\"\ndocker exec -i ai-q-postgresql psql -U ai_q_user < \"$BACKUP_PATH/postgresql-full.sql\"\n\n# Restore Redis\nlog \"Restoring Redis data\"\ndocker cp \"$BACKUP_PATH/redis-dump.rdb\" ai-q-redis-master:/data/dump.rdb\ndocker exec ai-q-redis-master redis-cli BGREWRITEAOF\n\n# Restore Elasticsearch\nlog \"Restoring Elasticsearch indices\"\ncurl -X POST \"localhost:9200/_snapshot/ai-q-backup/snapshot-$BACKUP_NAME/_restore?wait_for_completion=true\"\n\n# Restore configurations\nlog \"Restoring configuration files\"\ntar -xzf \"$BACKUP_PATH/configs.tar.gz\" -C /opt/ai-q\n\n# Restore Docker volumes\nlog \"Restoring Docker volumes\"\ndocker run --rm -v ai-q-data:/data -v \"$BACKUP_PATH\":/backup alpine tar xzf /backup/volumes.tar.gz -C /data\n\n# Start services\nlog \"Starting AI-Q services\"\ndocker-compose -f /opt/ai-q/docker/compose/ai-q-stack.yml up -d\n\nlog \"Recovery completed successfully from: $BACKUP_NAME\"",
        "commands": [
          "sudo tee /opt/ai-q/backup/scripts/recover-all.sh << 'EOF'\n#!/bin/bash\n# AI-Q Complete System Recovery Script\n\nBACKUP_DIR=\"/opt/ai-q/backup/data\"\nLOG_DIR=\"/opt/ai-q/backup/logs\"\n\nif [ $# -eq 0 ]; then\n    echo \"Usage: $0 <backup-name>\"\n    echo \"Available backups:\"\n    ls -1 \"$BACKUP_DIR\" | grep ai-q-backup-\n    exit 1\nfi\n\nBACKUP_NAME=$1\nBACKUP_PATH=\"$BACKUP_DIR/$BACKUP_NAME\"\n\nif [ ! -d \"$BACKUP_PATH\" ]; then\n    echo \"Backup $BACKUP_NAME not found\"\n    exit 1\nfi\n\n# Log function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_DIR/recovery-$BACKUP_NAME.log\"\n}\n\nlog \"Starting recovery from backup: $BACKUP_NAME\"\n\n# Stop services\nlog \"Stopping AI-Q services\"\ndocker-compose -f /opt/ai-q/docker/compose/ai-q-stack.yml down\n\n# Restore PostgreSQL\nlog \"Restoring PostgreSQL databases\"\ndocker exec -i ai-q-postgresql psql -U ai_q_user < \"$BACKUP_PATH/postgresql-full.sql\"\n\n# Restore Redis\nlog \"Restoring Redis data\"\ndocker cp \"$BACKUP_PATH/redis-dump.rdb\" ai-q-redis-master:/data/dump.rdb\ndocker exec ai-q-redis-master redis-cli BGREWRITEAOF\n\n# Restore Elasticsearch\nlog \"Restoring Elasticsearch indices\"\ncurl -X POST \"localhost:9200/_snapshot/ai-q-backup/snapshot-$BACKUP_NAME/_restore?wait_for_completion=true\"\n\n# Restore configurations\nlog \"Restoring configuration files\"\ntar -xzf \"$BACKUP_PATH/configs.tar.gz\" -C /opt/ai-q\n\n# Restore Docker volumes\nlog \"Restoring Docker volumes\"\ndocker run --rm -v ai-q-data:/data -v \"$BACKUP_PATH\":/backup alpine tar xzf /backup/volumes.tar.gz -C /data\n\n# Start services\nlog \"Starting AI-Q services\"\ndocker-compose -f /opt/ai-q/docker/compose/ai-q-stack.yml up -d\n\nlog \"Recovery completed successfully from: $BACKUP_NAME\"\nEOF",
          "sudo chmod +x /opt/ai-q/backup/scripts/recover-all.sh"
        ],
        "verification": "Check recovery script exists and is executable",
        "expected_output": "recover-all.sh created and made executable"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/backup/scripts/",
      "cat /opt/ai-q/backup/scripts/recover-all.sh"
    ],
    "expected_outputs": {
      "recovery_script": "recover-all.sh contains complete recovery logic",
      "executable": "Script is executable"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Backup Infrastructure Verification",
      "description": "Run comprehensive tests to verify backup system",
      "test_commands": [
        "/opt/ai-q/backup/scripts/backup-all.sh",
        "ls -la /opt/ai-q/backup/data/",
        "cat /opt/ai-q/backup/logs/backup-$(date +%Y%m%d).log",
        "/opt/ai-q/backup/scripts/recover-all.sh ai-q-backup-$(date +%Y%m%d_%H%M%S)"
      ],
      "expected_results": {
        "backup_created": "Backup directory created with all components",
        "backup_log": "Backup log shows successful completion",
        "recovery_test": "Recovery script executes without errors"
      }
    }
  },
  "next_steps": {
    "next_sub_recipe": "01-09-security-hardening",
    "prerequisites_completed": [
      "Backup scripts created and tested",
      "Versioning and retention configured",
      "Recovery procedures documented",
      "Backup testing completed",
      "All components backed up successfully"
    ],
    "readiness_check": "All verification commands pass successfully"
  }
} 
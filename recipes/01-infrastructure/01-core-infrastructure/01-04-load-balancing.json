{
  "metadata": {
    "sub_recipe_id": "01-04-load-balancing",
    "title": "Load Balancing and Reverse Proxy - Complete Implementation",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "last_updated": "2025-01-27T17:00:00Z",
    "purpose": "Exact step-by-step Nginx load balancing implementation with zero ambiguity",
    "total_tasks": 15,
    "estimated_duration": "2 days",
    "complexity": "Advanced",
    "dependencies": ["01-01-docker-environment", "01-02-system-monitoring", "01-03-logging-infrastructure"],
    "load_balancer": ["Nginx", "SSL Termination", "Health Checks", "Rate Limiting"]
  },
  "prerequisites": {
    "completed_tasks": [
      "01-01-01: Docker Engine installed",
      "01-01-02: Docker daemon configured",
      "01-01-03: Docker networks created",
      "01-02-01: Prometheus installed",
      "01-02-02: Node Exporter running",
      "01-02-03: Alert Manager configured",
      "01-02-04: Grafana installed",
      "01-03-01: Elasticsearch installed",
      "01-03-02: Logstash configured",
      "01-03-03: Kibana installed",
      "01-03-04: Filebeat running"
    ],
    "system_requirements": {
      "cpu": "Minimum 2 cores for load balancer",
      "ram": "Minimum 2GB for load balancer",
      "storage": "Minimum 10GB for logs and certificates",
      "network": "Access to all service networks"
    }
  },
  "task_01_install_nginx": {
    "task_id": "01-04-01",
    "title": "Install and Configure Nginx",
    "description": "Install Nginx with exact configuration for load balancing",
    "estimated_duration": "45 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-04-01-01",
        "title": "Create Nginx configuration directory",
        "description": "Create directory structure for Nginx",
        "commands": [
          "sudo mkdir -p /opt/ai-q/loadbalancer/nginx/config",
          "sudo mkdir -p /opt/ai-q/loadbalancer/nginx/logs",
          "sudo mkdir -p /opt/ai-q/loadbalancer/nginx/ssl",
          "sudo mkdir -p /opt/ai-q/loadbalancer/nginx/conf.d",
          "sudo mkdir -p /opt/ai-q/loadbalancer/nginx/html"
        ],
        "verification": "Check directories created",
        "expected_output": "All Nginx directories created successfully"
      },
      {
        "step_id": "01-04-01-02",
        "title": "Create main Nginx configuration",
        "description": "Create nginx.conf with exact configuration",
        "config_file": "/opt/ai-q/loadbalancer/nginx/config/nginx.conf",
        "config_content": {
          "user": "nginx",
          "worker_processes": "auto",
          "error_log": "/var/log/nginx/error.log warn",
          "pid": "/var/run/nginx.pid",
          "events": {
            "worker_connections": 1024,
            "use": "epoll",
            "multi_accept": "on"
          },
          "http": {
            "include": "/etc/nginx/mime.types",
            "default_type": "application/octet-stream",
            "log_format": "main '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\"'",
            "access_log": "/var/log/nginx/access.log main",
            "sendfile": "on",
            "tcp_nopush": "on",
            "tcp_nodelay": "on",
            "keepalive_timeout": 65,
            "types_hash_max_size": 2048,
            "client_max_body_size": "100M",
            "include": "/etc/nginx/conf.d/*.conf"
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/loadbalancer/nginx/config/nginx.conf << 'EOF'\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    \n    access_log /var/log/nginx/access.log main;\n    \n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 100M;\n    \n    include /etc/nginx/conf.d/*.conf;\n}\nEOF"
        ],
        "verification": "Check configuration file exists",
        "expected_output": "nginx.conf created with specified configuration"
      },
      {
        "step_id": "01-04-01-03",
        "title": "Create upstream configuration",
        "description": "Create upstream configuration for load balancing",
        "config_file": "/opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf",
        "config_content": {
          "upstream": {
            "ai-q-frontend": {
              "server": "frontend:3000 max_fails=3 fail_timeout=30s",
              "server": "frontend:3001 max_fails=3 fail_timeout=30s backup"
            },
            "ai-q-backend": {
              "server": "backend:8000 max_fails=3 fail_timeout=30s",
              "server": "backend:8001 max_fails=3 fail_timeout=30s backup"
            },
            "ai-q-api": {
              "server": "api:5000 max_fails=3 fail_timeout=30s",
              "server": "api:5001 max_fails=3 fail_timeout=30s backup"
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/loadbalancer/nginx/conf.d/upstreams.conf << 'EOF'\nupstream ai-q-frontend {\n    server frontend:3000 max_fails=3 fail_timeout=30s;\n    server frontend:3001 max_fails=3 fail_timeout=30s backup;\n}\n\nupstream ai-q-backend {\n    server backend:8000 max_fails=3 fail_timeout=30s;\n    server backend:8001 max_fails=3 fail_timeout=30s backup;\n}\n\nupstream ai-q-api {\n    server api:5000 max_fails=3 fail_timeout=30s;\n    server api:5001 max_fails=3 fail_timeout=30s backup;\n}\nEOF"
        ],
        "verification": "Check upstream configuration exists",
        "expected_output": "upstreams.conf created with specified configuration"
      },
      {
        "step_id": "01-04-01-04",
        "title": "Set Nginx permissions",
        "description": "Set correct permissions for Nginx",
        "commands": [
          "sudo chown -R 101:101 /opt/ai-q/loadbalancer/nginx/",
          "sudo chmod -R 755 /opt/ai-q/loadbalancer/nginx/"
        ],
        "verification": "Check permissions set correctly",
        "expected_output": "Nginx directories have correct ownership (101:101)"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/loadbalancer/nginx/",
      "cat /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
    ],
    "expected_outputs": {
      "config_file": "nginx.conf contains specified configuration",
      "upstreams": "upstreams.conf contains load balancing configuration",
      "permissions": "Files owned by user 101:101"
    }
  },
  "task_02_configure_ssl_certificates": {
    "task_id": "01-04-02",
    "title": "Configure SSL Certificates",
    "description": "Setup SSL certificates for secure HTTPS connections",
    "estimated_duration": "30 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-04-02-01",
        "title": "Create SSL directory structure",
        "description": "Create directories for SSL certificates",
        "commands": [
          "sudo mkdir -p /opt/ai-q/loadbalancer/ssl/certs",
          "sudo mkdir -p /opt/ai-q/loadbalancer/ssl/private",
          "sudo mkdir -p /opt/ai-q/loadbalancer/ssl/ca"
        ],
        "verification": "Check SSL directories created",
        "expected_output": "All SSL directories created successfully"
      },
      {
        "step_id": "01-04-02-02",
        "title": "Generate self-signed certificate for development",
        "description": "Generate self-signed SSL certificate for development environment",
        "commands": [
          "sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/ai-q/loadbalancer/ssl/private/ai-q.key -out /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -subj \"/C=US/ST=State/L=City/O=AI-Q/OU=IT/CN=ai-q.local\"",
          "sudo openssl dhparam -out /opt/ai-q/loadbalancer/ssl/dhparam.pem 2048"
        ],
        "verification": "Check SSL certificates generated",
        "expected_output": "SSL certificate and key files created successfully"
      },
      {
        "step_id": "01-04-02-03",
        "title": "Set SSL file permissions",
        "description": "Set secure permissions for SSL files",
        "commands": [
          "sudo chmod 600 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "sudo chmod 644 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "sudo chmod 644 /opt/ai-q/loadbalancer/ssl/dhparam.pem",
          "sudo chown 101:101 /opt/ai-q/loadbalancer/ssl/private/ai-q.key",
          "sudo chown 101:101 /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt",
          "sudo chown 101:101 /opt/ai-q/loadbalancer/ssl/dhparam.pem"
        ],
        "verification": "Check SSL file permissions",
        "expected_output": "SSL files have correct permissions and ownership"
      }
    ],
    "verification_commands": [
      "ls -la /opt/ai-q/loadbalancer/ssl/",
      "openssl x509 -in /opt/ai-q/loadbalancer/ssl/certs/ai-q.crt -text -noout"
    ],
    "expected_outputs": {
      "certificate": "SSL certificate exists and is valid",
      "private_key": "Private key exists with correct permissions",
      "dhparam": "DH parameters file exists"
    }
  },
  "task_03_configure_virtual_hosts": {
    "task_id": "01-04-03",
    "title": "Configure Virtual Hosts",
    "description": "Create virtual host configurations for different services",
    "estimated_duration": "40 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-04-03-01",
        "title": "Create main site configuration",
        "description": "Create main site configuration with SSL",
        "config_file": "/opt/ai-q/loadbalancer/nginx/conf.d/main-site.conf",
        "config_content": {
          "server": {
            "listen": "80",
            "server_name": "ai-q.local",
            "return": "301 https://$server_name$request_uri"
          },
          "server": {
            "listen": "443 ssl http2",
            "server_name": "ai-q.local",
            "ssl_certificate": "/etc/nginx/ssl/certs/ai-q.crt",
            "ssl_certificate_key": "/etc/nginx/ssl/private/ai-q.key",
            "ssl_protocols": "TLSv1.2 TLSv1.3",
            "ssl_ciphers": "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384",
            "ssl_prefer_server_ciphers": "off",
            "ssl_dhparam": "/etc/nginx/ssl/dhparam.pem",
            "location": {
              "/": {
                "proxy_pass": "http://ai-q-frontend",
                "proxy_set_header": "Host $host",
                "proxy_set_header": "X-Real-IP $remote_addr",
                "proxy_set_header": "X-Forwarded-For $proxy_add_x_forwarded_for",
                "proxy_set_header": "X-Forwarded-Proto $scheme"
              }
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/loadbalancer/nginx/conf.d/main-site.conf << 'EOF'\nserver {\n    listen 80;\n    server_name ai-q.local;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name ai-q.local;\n    \n    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;\n    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/nginx/ssl/dhparam.pem;\n    \n    location / {\n        proxy_pass http://ai-q-frontend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\nEOF"
        ],
        "verification": "Check main site configuration exists",
        "expected_output": "main-site.conf created with specified configuration"
      },
      {
        "step_id": "01-04-03-02",
        "title": "Create API site configuration",
        "description": "Create API site configuration with rate limiting",
        "config_file": "/opt/ai-q/loadbalancer/nginx/conf.d/api-site.conf",
        "config_content": {
          "limit_req_zone": "$binary_remote_addr zone=api:10m rate=10r/s",
          "server": {
            "listen": "443 ssl http2",
            "server_name": "api.ai-q.local",
            "ssl_certificate": "/etc/nginx/ssl/certs/ai-q.crt",
            "ssl_certificate_key": "/etc/nginx/ssl/private/ai-q.key",
            "location": {
              "/": {
                "limit_req": "zone=api burst=20 nodelay",
                "proxy_pass": "http://ai-q-api",
                "proxy_set_header": "Host $host",
                "proxy_set_header": "X-Real-IP $remote_addr",
                "proxy_set_header": "X-Forwarded-For $proxy_add_x_forwarded_for",
                "proxy_set_header": "X-Forwarded-Proto $scheme"
              }
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/loadbalancer/nginx/conf.d/api-site.conf << 'EOF'\nlimit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n\nserver {\n    listen 443 ssl http2;\n    server_name api.ai-q.local;\n    \n    ssl_certificate /etc/nginx/ssl/certs/ai-q.crt;\n    ssl_certificate_key /etc/nginx/ssl/private/ai-q.key;\n    \n    location / {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://ai-q-api;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\nEOF"
        ],
        "verification": "Check API site configuration exists",
        "expected_output": "api-site.conf created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/loadbalancer/nginx/conf.d/main-site.conf",
      "cat /opt/ai-q/loadbalancer/nginx/conf.d/api-site.conf"
    ],
    "expected_outputs": {
      "main_site": "main-site.conf contains SSL and proxy configuration",
      "api_site": "api-site.conf contains rate limiting and API configuration"
    }
  },
  "task_04_create_health_checks": {
    "task_id": "01-04-04",
    "title": "Create Health Check Endpoints",
    "description": "Create health check endpoints for load balancer monitoring",
    "estimated_duration": "20 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-04-04-01",
        "title": "Create health check configuration",
        "description": "Create health check configuration for monitoring",
        "config_file": "/opt/ai-q/loadbalancer/nginx/conf.d/health.conf",
        "config_content": {
          "server": {
            "listen": "8080",
            "server_name": "health.ai-q.local",
            "location": {
              "/health": {
                "access_log": "off",
                "return": "200 'healthy\\n'",
                "add_header": "Content-Type text/plain"
              },
              "/status": {
                "stub_status": "on",
                "access_log": "off",
                "allow": "127.0.0.1",
                "deny": "all"
              }
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/loadbalancer/nginx/conf.d/health.conf << 'EOF'\nserver {\n    listen 8080;\n    server_name health.ai-q.local;\n    \n    location /health {\n        access_log off;\n        return 200 'healthy\\n';\n        add_header Content-Type text/plain;\n    }\n    \n    location /status {\n        stub_status on;\n        access_log off;\n        allow 127.0.0.1;\n        deny all;\n    }\n}\nEOF"
        ],
        "verification": "Check health check configuration exists",
        "expected_output": "health.conf created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/loadbalancer/nginx/conf.d/health.conf"
    ],
    "expected_outputs": {
      "health_config": "health.conf contains health check endpoints"
    }
  },
  "task_05_create_loadbalancer_docker_compose": {
    "task_id": "01-04-05",
    "title": "Create Docker Compose for Load Balancer",
    "description": "Create docker-compose.yml for load balancer service",
    "estimated_duration": "25 minutes",
    "critical": true,
    "steps": [
      {
        "step_id": "01-04-05-01",
        "title": "Create load balancer docker-compose.yml",
        "description": "Create complete docker-compose.yml for load balancer",
        "config_file": "/opt/ai-q/docker/compose/loadbalancer.yml",
        "config_content": {
          "version": "3.8",
          "services": {
            "nginx": {
              "image": "nginx:1.25-alpine",
              "container_name": "ai-q-nginx",
              "ports": ["80:80", "443:443", "8080:8080"],
              "volumes": [
                "/opt/ai-q/loadbalancer/nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro",
                "/opt/ai-q/loadbalancer/nginx/conf.d:/etc/nginx/conf.d:ro",
                "/opt/ai-q/loadbalancer/nginx/logs:/var/log/nginx",
                "/opt/ai-q/loadbalancer/ssl:/etc/nginx/ssl:ro"
              ],
              "networks": ["ai-q-frontend", "ai-q-backend", "ai-q-monitoring"],
              "restart": "unless-stopped"
            }
          },
          "networks": {
            "ai-q-frontend": {
              "external": true
            },
            "ai-q-backend": {
              "external": true
            },
            "ai-q-monitoring": {
              "external": true
            }
          }
        },
        "commands": [
          "sudo tee /opt/ai-q/docker/compose/loadbalancer.yml << 'EOF'\nversion: '3.8'\n\nservices:\n  nginx:\n    image: nginx:1.25-alpine\n    container_name: ai-q-nginx\n    ports:\n      - 80:80\n      - 443:443\n      - 8080:8080\n    volumes:\n      - /opt/ai-q/loadbalancer/nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro\n      - /opt/ai-q/loadbalancer/nginx/conf.d:/etc/nginx/conf.d:ro\n      - /opt/ai-q/loadbalancer/nginx/logs:/var/log/nginx\n      - /opt/ai-q/loadbalancer/ssl:/etc/nginx/ssl:ro\n    networks:\n      - ai-q-frontend\n      - ai-q-backend\n      - ai-q-monitoring\n    restart: unless-stopped\n\nnetworks:\n  ai-q-frontend:\n    external: true\n  ai-q-backend:\n    external: true\n  ai-q-monitoring:\n    external: true\nEOF"
        ],
        "verification": "Check docker-compose file exists",
        "expected_output": "loadbalancer.yml created with specified configuration"
      }
    ],
    "verification_commands": [
      "cat /opt/ai-q/docker/compose/loadbalancer.yml",
      "docker-compose -f /opt/ai-q/docker/compose/loadbalancer.yml config"
    ],
    "expected_outputs": {
      "config_valid": "Docker Compose configuration is valid",
      "services": "Nginx load balancer service defined"
    }
  },
  "verification_and_testing": {
    "comprehensive_test": {
      "title": "Complete Load Balancer Verification",
      "description": "Run comprehensive tests to verify load balancer functionality",
      "test_commands": [
        "docker-compose -f /opt/ai-q/docker/compose/loadbalancer.yml up -d",
        "sleep 10",
        "curl -k -s https://localhost/health",
        "curl -s http://localhost:8080/health",
        "curl -s http://localhost:8080/status",
        "nginx -t"
      ],
      "expected_results": {
        "https_health": "Returns healthy response",
        "http_health": "Returns healthy response",
        "nginx_status": "Returns Nginx status information",
        "config_test": "Nginx configuration test passes"
      }
    }
  },
  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Nginx fails to start",
        "symptoms": "Nginx container exits with configuration error",
        "solution": "Check Nginx configuration syntax",
        "commands": [
          "docker logs ai-q-nginx",
          "nginx -t -c /opt/ai-q/loadbalancer/nginx/config/nginx.conf"
        ]
      },
      {
        "issue": "SSL certificate errors",
        "symptoms": "SSL handshake failures",
        "solution": "Check SSL certificate configuration",
        "commands": [
          "openssl s_client -connect localhost:443 -servername ai-q.local",
          "ls -la /opt/ai-q/loadbalancer/ssl/"
        ]
      },
      {
        "issue": "Upstream connection failures",
        "symptoms": "502 Bad Gateway errors",
        "solution": "Check upstream service availability",
        "commands": [
          "docker network inspect ai-q-frontend",
          "docker network inspect ai-q-backend",
          "curl -s http://localhost:8080/status"
        ]
      }
    ]
  },
  "next_steps": {
    "next_sub_recipe": "01-05-service-discovery",
    "prerequisites_completed": [
      "Nginx installed and configured",
      "SSL certificates generated and configured",
      "Virtual hosts configured",
      "Health check endpoints created",
      "Load balancer running and accessible",
      "All upstream services reachable"
    ],
    "readiness_check": "All verification commands pass successfully"
  }
} 
{
  "recipe_metadata": {
    "recipe_id": "01-CORE-INFRASTRUCTURE-MASTER",
    "title": "Core Infrastructure Master Recipe",
    "version": "5.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-01-28T13:30:00Z",
    "last_updated": "2025-01-28T16:00:00Z",
    "difficulty_level": "expert",
    "architecture_tier": "enterprise-foundation",
    "description": "Master recipe orchestrating complete core infrastructure implementation with exact specifications, atomic tasks, and zero technical debt",
    "is_master_recipe": true,
    "kitchen_system": {
      "pantry_category": "infrastructure",
      "cooking_time": "480 minutes",
      "complexity": "expert",
      "kitchen_tools": ["docker_orchestration", "monitoring_setup", "security_hardening", "performance_optimization"],
      "cache_strategy": "core_infrastructure_cache",
      "orchestrator_priority": "critical"
    }
  },
  "recipe_overview": {
    "name": "Core Infrastructure Master System",
    "description": "Complete enterprise-grade core infrastructure with Docker orchestration, monitoring, security, and performance optimization",
    "prerequisites": [
      "Ubuntu 22.04 LTS or Windows 11 with WSL2",
      "Minimum 16GB RAM, 8 CPU cores",
      "100GB free disk space",
      "Docker Engine 24.0+ installed",
      "Docker Compose 2.20+ installed",
      "Git 2.35+ installed"
    ],
    "target_outcome": "Production-ready infrastructure foundation with zero technical debt",
    "success_criteria": [
      "All Docker services start successfully with health checks",
      "Monitoring dashboard accessible at http://localhost:3000",
      "Logging system operational with centralized collection",
      "Security hardening applied and validated",
      "Performance benchmarks met (response time < 200ms)",
      "Backup system functional with automated scheduling",
      "All components can be safely installed/uninstalled"
    ]
  },
  "pantry_ingredients": {
    "tasks": [
      {
        "task_id": "DOCKER_ENVIRONMENT_TASK",
        "name": "Docker Environment Setup",
        "description": "Create production-ready Docker environment with exact configurations",
        "estimated_time": "60 minutes",
        "dependencies": [],
        "skills_required": ["docker_orchestration", "container_management", "network_configuration"],
        "exact_commands": [
          "mkdir -p /opt/ai-q/{data,config,logs,backups}",
          "chmod 755 /opt/ai-q",
          "docker network create ai-q-network --subnet=172.20.0.0/16",
          "docker network create ai-q-monitoring --subnet=172.21.0.0/16"
        ]
      },
      {
        "task_id": "MONITORING_SETUP_TASK",
        "name": "Monitoring Infrastructure Setup",
        "description": "Deploy Prometheus, Grafana, and alerting with exact configurations",
        "estimated_time": "60 minutes",
        "dependencies": ["DOCKER_ENVIRONMENT_TASK"],
        "skills_required": ["prometheus_config", "grafana_setup", "alerting_configuration"],
        "exact_commands": [
          "docker run -d --name prometheus --network ai-q-monitoring -p 9090:9090 -v /opt/ai-q/config/prometheus:/etc/prometheus prom/prometheus:v2.45.0",
          "docker run -d --name grafana --network ai-q-monitoring -p 3000:3000 -v /opt/ai-q/data/grafana:/var/lib/grafana grafana/grafana:10.0.0"
        ]
      },
      {
        "task_id": "SECURITY_HARDENING_TASK",
        "name": "Security Hardening Implementation",
        "description": "Apply comprehensive security hardening with exact configurations",
        "estimated_time": "60 minutes",
        "dependencies": ["MONITORING_SETUP_TASK"],
        "skills_required": ["security_configuration", "firewall_setup", "ssl_certificates"],
        "exact_commands": [
          "ufw allow 22/tcp",
          "ufw allow 80/tcp",
          "ufw allow 443/tcp",
          "ufw enable",
          "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/ai-q/config/ssl/nginx.key -out /opt/ai-q/config/ssl/nginx.crt"
        ]
      }
    ],
    "skills": [
      {
        "skill_id": "DOCKER_ORCHESTRATION_SKILL",
        "name": "Docker Orchestration",
        "description": "Orchestrate Docker containers and services",
        "tools": ["docker", "docker_compose", "docker_swarm"],
        "validation": "docker_orchestration_validation",
        "exact_validation_commands": [
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "docker network ls --filter name=ai-q",
          "docker-compose config --quiet"
        ]
      },
      {
        "skill_id": "MONITORING_SETUP_SKILL",
        "name": "Monitoring Setup",
        "description": "Setup and configure monitoring systems",
        "tools": ["prometheus", "grafana", "alertmanager"],
        "validation": "monitoring_setup_validation",
        "exact_validation_commands": [
          "curl -f http://localhost:9090/-/healthy",
          "curl -f http://localhost:3000/api/health",
          "docker exec prometheus promtool check config /etc/prometheus/prometheus.yml"
        ]
      },
      {
        "skill_id": "SECURITY_HARDENING_SKILL",
        "name": "Security Hardening",
        "description": "Apply security hardening measures",
        "tools": ["firewall", "ssl_certificates", "security_scanning"],
        "validation": "security_hardening_validation",
        "exact_validation_commands": [
          "ufw status verbose",
          "openssl x509 -in /opt/ai-q/config/ssl/nginx.crt -text -noout",
          "nmap -sT localhost -p 22,80,443,3000,9090"
        ]
      }
    ],
    "tools": [
      {
        "tool_id": "CORE_INFRASTRUCTURE_TOOL",
        "name": "Core Infrastructure Engine",
        "description": "Core infrastructure orchestration system",
        "file_path": "src/services/infrastructure/core.py",
        "config": "config/infrastructure/core_config.json",
        "exact_config_spec": {
          "docker_compose_version": "3.8",
          "prometheus_version": "v2.45.0",
          "grafana_version": "10.0.0",
          "network_subnet": "172.20.0.0/16",
          "monitoring_subnet": "172.21.0.0/16"
        }
      },
      {
        "tool_id": "DOCKER_ORCHESTRATOR_TOOL",
        "name": "Docker Orchestrator",
        "description": "Docker container orchestration",
        "file_path": "src/services/infrastructure/docker_orchestrator.py",
        "config": "config/infrastructure/docker_config.json",
        "exact_config_spec": {
          "container_restart_policy": "unless-stopped",
          "health_check_interval": "30s",
          "health_check_timeout": "10s",
          "health_check_retries": 3
        }
      },
      {
        "tool_id": "MONITORING_TOOL",
        "name": "Monitoring Engine",
        "description": "Monitoring and alerting system",
        "file_path": "src/services/infrastructure/monitoring.py",
        "config": "config/infrastructure/monitoring_config.json",
        "exact_config_spec": {
          "prometheus_retention_days": 15,
          "grafana_admin_password": "admin123",
          "alert_check_interval": "1m",
          "dashboard_auto_refresh": "30s"
        }
      }
    ],
    "configs": [
      {
        "config_id": "CORE_INFRASTRUCTURE_CONFIG",
        "name": "Core Infrastructure Configuration",
        "description": "Configuration for core infrastructure system",
        "file_path": "config/infrastructure/core_config.json",
        "schema": "core_infrastructure_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "docker_compose_version": {"type": "string", "pattern": "^3\\.[0-9]+$"},
            "prometheus_version": {"type": "string", "pattern": "^v[0-9]+\\.[0-9]+\\.[0-9]+$"},
            "grafana_version": {"type": "string", "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$"},
            "network_subnet": {"type": "string", "format": "ipv4-cidr"},
            "monitoring_subnet": {"type": "string", "format": "ipv4-cidr"}
          },
          "required": ["docker_compose_version", "prometheus_version", "grafana_version", "network_subnet", "monitoring_subnet"]
        }
      },
      {
        "config_id": "DOCKER_CONFIG",
        "name": "Docker Configuration",
        "description": "Configuration for Docker orchestration",
        "file_path": "config/infrastructure/docker_config.json",
        "schema": "docker_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "container_restart_policy": {"type": "string", "enum": ["no", "always", "unless-stopped", "on-failure"]},
            "health_check_interval": {"type": "string", "pattern": "^[0-9]+s$"},
            "health_check_timeout": {"type": "string", "pattern": "^[0-9]+s$"},
            "health_check_retries": {"type": "integer", "minimum": 1, "maximum": 10}
          },
          "required": ["container_restart_policy", "health_check_interval", "health_check_timeout", "health_check_retries"]
        }
      },
      {
        "config_id": "MONITORING_CONFIG",
        "name": "Monitoring Configuration",
        "description": "Configuration for monitoring system",
        "file_path": "config/infrastructure/monitoring_config.json",
        "schema": "monitoring_config_schema",
        "exact_schema": {
          "type": "object",
          "properties": {
            "prometheus_retention_days": {"type": "integer", "minimum": 1, "maximum": 365},
            "grafana_admin_password": {"type": "string", "minLength": 8},
            "alert_check_interval": {"type": "string", "pattern": "^[0-9]+[smhd]$"},
            "dashboard_auto_refresh": {"type": "string", "pattern": "^[0-9]+s$"}
          },
          "required": ["prometheus_retention_days", "grafana_admin_password", "alert_check_interval", "dashboard_auto_refresh"]
        }
      }
    ]
  },
  "kitchen_execution": {
    "orchestrator_steps": [
      {
        "step_id": "STEP_1",
        "action": "gather_ingredients",
        "ingredients": ["DOCKER_ENVIRONMENT_TASK", "DOCKER_ORCHESTRATION_SKILL", "CORE_INFRASTRUCTURE_TOOL"],
        "description": "Gather core infrastructure ingredients from pantry",
        "exact_commands": [
          "python3 src/services/infrastructure/core.py --gather-ingredients",
          "python3 src/services/infrastructure/core.py --validate-prerequisites"
        ]
      },
      {
        "step_id": "STEP_2",
        "action": "check_cache",
        "cache_key": "core_infrastructure_cache",
        "description": "Check for existing core infrastructure cache",
        "exact_commands": [
          "python3 src/services/infrastructure/core.py --check-cache",
          "ls -la /opt/ai-q/cache/core_infrastructure/"
        ]
      },
      {
        "step_id": "STEP_3",
        "action": "execute_task",
        "task": "DOCKER_ENVIRONMENT_TASK",
        "description": "Execute Docker environment setup task",
        "exact_commands": [
          "mkdir -p /opt/ai-q/{data,config,logs,backups,cache}",
          "chmod 755 /opt/ai-q",
          "docker network create ai-q-network --subnet=172.20.0.0/16",
          "docker network create ai-q-monitoring --subnet=172.21.0.0/16",
          "python3 src/services/infrastructure/docker_orchestrator.py --setup-environment"
        ]
      },
      {
        "step_id": "STEP_4",
        "action": "gather_ingredients",
        "ingredients": ["MONITORING_SETUP_TASK", "MONITORING_SETUP_SKILL", "MONITORING_TOOL"],
        "description": "Gather monitoring setup ingredients from pantry",
        "exact_commands": [
          "python3 src/services/infrastructure/monitoring.py --gather-ingredients",
          "docker pull prom/prometheus:v2.45.0",
          "docker pull grafana/grafana:10.0.0"
        ]
      },
      {
        "step_id": "STEP_5",
        "action": "execute_task",
        "task": "MONITORING_SETUP_TASK",
        "description": "Execute monitoring setup task",
        "exact_commands": [
          "docker run -d --name prometheus --network ai-q-monitoring -p 9090:9090 -v /opt/ai-q/config/prometheus:/etc/prometheus prom/prometheus:v2.45.0",
          "docker run -d --name grafana --network ai-q-monitoring -p 3000:3000 -v /opt/ai-q/data/grafana:/var/lib/grafana grafana/grafana:10.0.0",
          "python3 src/services/infrastructure/monitoring.py --setup-dashboards"
        ]
      },
      {
        "step_id": "STEP_6",
        "action": "gather_ingredients",
        "ingredients": ["SECURITY_HARDENING_TASK", "SECURITY_HARDENING_SKILL"],
        "description": "Gather security hardening ingredients from pantry",
        "exact_commands": [
          "python3 src/services/infrastructure/security.py --gather-ingredients",
          "apt-get update && apt-get install -y ufw openssl"
        ]
      },
      {
        "step_id": "STEP_7",
        "action": "execute_task",
        "task": "SECURITY_HARDENING_TASK",
        "description": "Execute security hardening task",
        "exact_commands": [
          "ufw allow 22/tcp",
          "ufw allow 80/tcp",
          "ufw allow 443/tcp",
          "ufw enable",
          "mkdir -p /opt/ai-q/config/ssl",
          "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/ai-q/config/ssl/nginx.key -out /opt/ai-q/config/ssl/nginx.crt -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost'",
          "python3 src/services/infrastructure/security.py --apply-hardening"
        ]
      },
      {
        "step_id": "STEP_8",
        "action": "validate_results",
        "validation": "core_infrastructure_validation",
        "description": "Validate complete core infrastructure system",
        "exact_commands": [
          "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'",
          "curl -f http://localhost:9090/-/healthy",
          "curl -f http://localhost:3000/api/health",
          "ufw status verbose",
          "python3 src/services/infrastructure/core.py --validate-system"
        ]
      },
      {
        "step_id": "STEP_9",
        "action": "cache_results",
        "cache_key": "core_infrastructure_cache",
        "description": "Cache core infrastructure configuration and setup",
        "exact_commands": [
          "python3 src/services/infrastructure/core.py --cache-results",
          "tar -czf /opt/ai-q/cache/core_infrastructure_cache.tar.gz /opt/ai-q/config /opt/ai-q/data"
        ]
      }
    ],
    "caching_strategy": {
      "cache_key": "core_infrastructure_cache",
      "cache_duration": "persistent",
      "cache_invalidation": "infrastructure_update",
      "cache_validation": "core_infrastructure_validation",
      "exact_cache_commands": [
        "python3 src/services/infrastructure/core.py --cache-config",
        "python3 src/services/infrastructure/core.py --cache-docker-images",
        "python3 src/services/infrastructure/core.py --cache-monitoring-data"
      ]
    }
  },
  "implementation_steps": [
    {
      "task_id": "01-001",
      "title": "Create Core Infrastructure Architecture",
      "description": "Design and implement the core infrastructure architecture with exact specifications",
      "estimated_time": "60 minutes",
      "estimated_tokens": 3000,
      "exact_commands": [
        "mkdir -p src/services/infrastructure",
        "mkdir -p config/infrastructure",
        "mkdir -p /opt/ai-q/{data,config,logs,backups,cache}",
        "chmod 755 /opt/ai-q"
      ],
      "files_to_create": [
        "src/services/infrastructure/__init__.py",
        "src/services/infrastructure/core.py",
        "src/services/infrastructure/docker_orchestrator.py",
        "src/services/infrastructure/monitoring.py",
        "src/services/infrastructure/security.py",
        "config/infrastructure/core_config.json",
        "config/infrastructure/docker_config.json",
        "config/infrastructure/monitoring_config.json"
      ],
      "acceptance_criteria": [
        "All directory structures created with correct permissions",
        "Core infrastructure base classes defined with exact interfaces",
        "Configuration system supports all infrastructure types with validation",
        "Type definitions for all infrastructure operations with exact specifications",
        "Manager class can handle multiple infrastructure providers with atomic operations"
      ]
    },
    {
      "task_id": "01-002",
      "title": "Implement Docker Environment Setup",
      "description": "Create production-ready Docker environment with exact configurations and health checks",
      "estimated_time": "60 minutes",
      "estimated_tokens": 3000,
      "exact_commands": [
        "docker network create ai-q-network --subnet=172.20.0.0/16",
        "docker network create ai-q-monitoring --subnet=172.21.0.0/16",
        "docker network create ai-q-services --subnet=172.22.0.0/16"
      ],
      "files_to_create": [
        "docker-compose.yml",
        "docker-compose.override.yml",
        "docker-compose.prod.yml",
        "docker/nginx/nginx.conf",
        "docker/nginx/default.conf",
        "docker/nginx/ssl.conf"
      ],
      "acceptance_criteria": [
        "Docker networks created with exact subnet configurations",
        "Docker Compose files functional with health checks",
        "Nginx configuration operational with SSL support",
        "All services can communicate across networks",
        "Health checks respond within 3 seconds"
      ]
    },
    {
      "task_id": "01-003",
      "title": "Implement Monitoring Infrastructure",
      "description": "Deploy Prometheus, Grafana, and alerting with exact configurations and dashboards",
      "estimated_time": "60 minutes",
      "estimated_tokens": 3000,
      "exact_commands": [
        "docker run -d --name prometheus --network ai-q-monitoring -p 9090:9090 -v /opt/ai-q/config/prometheus:/etc/prometheus prom/prometheus:v2.45.0",
        "docker run -d --name grafana --network ai-q-monitoring -p 3000:3000 -v /opt/ai-q/data/grafana:/var/lib/grafana grafana/grafana:10.0.0",
        "docker run -d --name alertmanager --network ai-q-monitoring -p 9093:9093 -v /opt/ai-q/config/alertmanager:/etc/alertmanager prom/alertmanager:v0.25.0"
      ],
      "files_to_create": [
        "config/prometheus/prometheus.yml",
        "config/prometheus/rules/",
        "config/grafana/dashboards/",
        "config/grafana/provisioning/",
        "config/alertmanager/alertmanager.yml"
      ],
      "acceptance_criteria": [
        "Prometheus accessible at http://localhost:9090 with health check",
        "Grafana accessible at http://localhost:3000 with admin/admin credentials",
        "AlertManager accessible at http://localhost:9093",
        "All monitoring targets showing as UP",
        "Dashboard auto-refresh working at 30-second intervals"
      ]
    }
  ],
  "acceptance_criteria": [
    "All Docker services start successfully with health checks passing",
    "Monitoring dashboard accessible at http://localhost:3000 with admin/admin",
    "Prometheus metrics collection operational at http://localhost:9090",
    "Logging system functional with centralized collection in /opt/ai-q/logs",
    "Security hardening applied with UFW firewall enabled",
    "SSL certificates generated and configured for HTTPS",
    "Performance benchmarks met (response time < 200ms for all services)",
    "Backup system functional with automated daily scheduling",
    "All components can be safely installed/uninstalled with atomic operations",
    "Zero technical debt with complete documentation and validation"
  ],
  "deliverables": [
    "Production-ready Docker environment with exact configurations",
    "Comprehensive monitoring system with Prometheus, Grafana, and AlertManager",
    "Centralized logging infrastructure with log rotation and retention",
    "Security hardened system with firewall, SSL certificates, and access controls",
    "Performance optimized infrastructure with caching and load balancing",
    "Automated backup system with daily scheduling and retention policies",
    "Complete documentation with troubleshooting guides and optimization tips",
    "Validation scripts for all components with exact test procedures",
    "Rollback procedures for safe deployment and recovery",
    "API endpoints for infrastructure management and monitoring"
  ],
  "troubleshooting_guide": {
    "common_issues": [
      {
        "issue": "Docker services fail to start",
        "symptoms": "docker-compose up fails with network errors",
        "diagnosis": "Check Docker network configuration and subnet conflicts",
        "solution": "Remove existing networks and recreate: docker network prune && docker network create ai-q-network --subnet=172.20.0.0/16",
        "prevention": "Always validate network configurations before deployment"
      },
      {
        "issue": "Prometheus targets showing as DOWN",
        "symptoms": "Targets in Prometheus UI showing red status",
        "diagnosis": "Check target endpoints and network connectivity",
        "solution": "Verify target URLs and network access: curl -f http://target:port/health",
        "prevention": "Implement proper health checks and monitoring"
      },
      {
        "issue": "Grafana login fails",
        "symptoms": "Cannot login with admin/admin credentials",
        "diagnosis": "Check Grafana container logs and data persistence",
        "solution": "Reset Grafana admin password: docker exec grafana grafana-cli admin reset-admin-password newpassword",
        "prevention": "Use environment variables for secure credential management"
      }
    ],
    "performance_optimization": [
      {
        "optimization": "Docker resource limits",
        "description": "Set memory and CPU limits for containers",
        "implementation": "Add resources section to docker-compose.yml with exact limits",
        "expected_improvement": "20-30% better resource utilization"
      },
      {
        "optimization": "Prometheus retention optimization",
        "description": "Configure data retention and compression",
        "implementation": "Set --storage.tsdb.retention.time=15d in Prometheus config",
        "expected_improvement": "50% reduction in storage usage"
      },
      {
        "optimization": "Log rotation and compression",
        "description": "Implement log rotation with compression",
        "implementation": "Configure logrotate with daily rotation and gzip compression",
        "expected_improvement": "70% reduction in log storage"
      }
    ]
  },
  "performance_benchmarks": {
    "response_time_targets": {
      "docker_service_start": "< 30 seconds",
      "prometheus_query": "< 100ms",
      "grafana_dashboard_load": "< 2 seconds",
      "health_check_response": "< 3 seconds",
      "backup_completion": "< 10 minutes"
    },
    "resource_utilization_targets": {
      "cpu_usage": "< 70% under normal load",
      "memory_usage": "< 80% of allocated",
      "disk_usage": "< 85% of available space",
      "network_throughput": "> 100 Mbps sustained"
    },
    "availability_targets": {
      "uptime": "> 99.9%",
      "mean_time_to_recovery": "< 5 minutes",
      "backup_success_rate": "> 99.5%",
      "monitoring_uptime": "> 99.99%"
    }
  }
} 
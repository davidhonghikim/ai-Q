{
  "task_id": "01-003",
  "title": "Docker Compose Infrastructure Definition",
  "estimated_tokens": 1950,
  "estimated_time": "40 minutes",
  "description": "Create comprehensive Docker Compose with PostgreSQL, Redis, Minio, Weaviate, monitoring, and logging services for Universal Digital Twin infrastructure.",
  "objectives": [
    "Define 12+ services with proper configuration",
    "Configure databases with optimization and persistence", 
    "Set up object storage and vector database",
    "Establish monitoring and logging infrastructure",
    "Implement service networking and dependencies"
  ],
  "execution_steps": [
    {
      "step": 1,
      "title": "Core Database Services",
      "file_content": "docker-compose.yml",
      "commands": [
        "cat > docker-compose.yml << 'EOF'",
        "version: '3.8'",
        "",
        "services:",
        "  postgres:",
        "    image: postgres:15-alpine",
        "    container_name: ai-q-postgres",
        "    environment:",
        "      POSTGRES_DB: ai_q_db",
        "      POSTGRES_USER: ai_q_user",
        "      POSTGRES_PASSWORD: ai_q_secure_password_2024",
        "    ports:",
        "      - '5432:5432'",
        "    volumes:",
        "      - postgres_data:/var/lib/postgresql/data",
        "      - ./config/database/init:/docker-entrypoint-initdb.d",
        "    networks:",
        "      - ai-q-backend",
        "    healthcheck:",
        "      test: ['CMD-SHELL', 'pg_isready -U ai_q_user -d ai_q_db']",
        "      interval: 30s",
        "      timeout: 10s",
        "      retries: 3",
        "    restart: unless-stopped",
        "",
        "  redis:",
        "    image: redis:7-alpine",
        "    container_name: ai-q-redis",
        "    command: redis-server --appendonly yes --requirepass ai_q_redis_password_2024",
        "    ports:",
        "      - '6379:6379'",
        "    volumes:",
        "      - redis_data:/data",
        "    networks:",
        "      - ai-q-backend",
        "    healthcheck:",
        "      test: ['CMD', 'redis-cli', 'ping']",
        "      interval: 30s",
        "    restart: unless-stopped",
        "EOF"
      ]
    },
    {
      "step": 2,
      "title": "Storage and Vector Services",
      "commands": [
        "cat >> docker-compose.yml << 'EOF'",
        "",
        "  minio:",
        "    image: minio/minio:latest",
        "    container_name: ai-q-minio",
        "    command: server /data --console-address ':9001'",
        "    environment:",
        "      MINIO_ROOT_USER: ai_q_minio_admin",
        "      MINIO_ROOT_PASSWORD: ai_q_minio_secure_password_2024",
        "    ports:",
        "      - '9000:9000'",
        "      - '9001:9001'",
        "    volumes:",
        "      - minio_data:/data",
        "    networks:",
        "      - ai-q-backend",
        "    healthcheck:",
        "      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']",
        "      interval: 30s",
        "    restart: unless-stopped",
        "",
        "  weaviate:",
        "    image: semitechnologies/weaviate:1.21.2",
        "    container_name: ai-q-weaviate",
        "    environment:",
        "      QUERY_DEFAULTS_LIMIT: 25",
        "      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'",
        "      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'",
        "      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'",
        "      ENABLE_MODULES: 'text2vec-transformers,multi2vec-clip'",
        "      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'",
        "    ports:",
        "      - '8080:8080'",
        "    volumes:",
        "      - weaviate_data:/var/lib/weaviate",
        "    networks:",
        "      - ai-q-backend",
        "    depends_on:",
        "      - t2v-transformers",
        "    restart: unless-stopped",
        "EOF"
      ]
    },
    {
      "step": 3,
      "title": "AI Processing Services",
      "commands": [
        "cat >> docker-compose.yml << 'EOF'",
        "",
        "  t2v-transformers:",
        "    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2",
        "    container_name: ai-q-transformers",
        "    environment:",
        "      ENABLE_CUDA: '0'",
        "    networks:",
        "      - ai-q-backend",
        "    healthcheck:",
        "      test: ['CMD', 'curl', '-f', 'http://localhost:8080/.well-known/ready']",
        "      interval: 60s",
        "      start_period: 120s",
        "    restart: unless-stopped",
        "",
        "  multi2vec-clip:",
        "    image: semitechnologies/multi2vec-clip:sentence-transformers-clip-ViT-B-32",
        "    container_name: ai-q-clip",
        "    environment:",
        "      ENABLE_CUDA: '0'",
        "    networks:",
        "      - ai-q-backend",
        "    healthcheck:",
        "      test: ['CMD', 'curl', '-f', 'http://localhost:8080/.well-known/ready']",
        "      interval: 60s",
        "      start_period: 120s",
        "    restart: unless-stopped",
        "EOF"
      ]
    },
    {
      "step": 4,
      "title": "Monitoring Services",
      "commands": [
        "cat >> docker-compose.yml << 'EOF'",
        "",
        "  grafana:",
        "    image: grafana/grafana:latest",
        "    container_name: ai-q-grafana",
        "    environment:",
        "      GF_SECURITY_ADMIN_PASSWORD: ai_q_grafana_admin_2024",
        "      GF_USERS_ALLOW_SIGN_UP: 'false'",
        "    ports:",
        "      - '3001:3000'",
        "    volumes:",
        "      - grafana_data:/var/lib/grafana",
        "    networks:",
        "      - ai-q-monitoring",
        "    restart: unless-stopped",
        "",
        "  prometheus:",
        "    image: prom/prometheus:latest",
        "    container_name: ai-q-prometheus",
        "    command:",
        "      - '--config.file=/etc/prometheus/prometheus.yml'",
        "      - '--storage.tsdb.path=/prometheus'",
        "      - '--storage.tsdb.retention.time=200h'",
        "    ports:",
        "      - '9090:9090'",
        "    volumes:",
        "      - prometheus_data:/prometheus",
        "      - ./config/monitoring/prometheus:/etc/prometheus",
        "    networks:",
        "      - ai-q-monitoring",
        "      - ai-q-backend",
        "    restart: unless-stopped",
        "EOF"
      ]
    },
    {
      "step": 5,
      "title": "Logging Services",
      "commands": [
        "cat >> docker-compose.yml << 'EOF'",
        "",
        "  elasticsearch:",
        "    image: elasticsearch:8.8.0",
        "    container_name: ai-q-elasticsearch",
        "    environment:",
        "      discovery.type: single-node",
        "      ES_JAVA_OPTS: '-Xms512m -Xmx512m'",
        "      xpack.security.enabled: 'false'",
        "    ports:",
        "      - '9200:9200'",
        "    volumes:",
        "      - elasticsearch_data:/usr/share/elasticsearch/data",
        "    networks:",
        "      - ai-q-logging",
        "    restart: unless-stopped",
        "",
        "  kibana:",
        "    image: kibana:8.8.0",
        "    container_name: ai-q-kibana",
        "    environment:",
        "      ELASTICSEARCH_HOSTS: http://elasticsearch:9200",
        "    ports:",
        "      - '5601:5601'",
        "    networks:",
        "      - ai-q-logging",
        "    depends_on:",
        "      - elasticsearch",
        "    restart: unless-stopped",
        "EOF"
      ]
    },
    {
      "step": 6,
      "title": "Networks and Volumes",
      "commands": [
        "cat >> docker-compose.yml << 'EOF'",
        "",
        "networks:",
        "  ai-q-backend:",
        "    external: true",
        "  ai-q-frontend:",
        "    external: true", 
        "  ai-q-monitoring:",
        "    external: true",
        "  ai-q-logging:",
        "    external: true",
        "",
        "volumes:",
        "  postgres_data:",
        "  redis_data:",
        "  minio_data:",
        "  weaviate_data:",
        "  grafana_data:",
        "  prometheus_data:",
        "  elasticsearch_data:",
        "EOF"
      ]
    },
    {
      "step": 7,
      "title": "Database Initialization",
      "commands": [
        "mkdir -p config/database/init",
        "cat > config/database/init/01-init-database.sql << 'EOF'",
        "-- AI-Q Universal Digital Twin Database Initialization",
        "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";",
        "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";",
        "CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";",
        "",
        "-- Create schemas",
        "CREATE SCHEMA IF NOT EXISTS content;",
        "CREATE SCHEMA IF NOT EXISTS metadata;",
        "CREATE SCHEMA IF NOT EXISTS analytics;",
        "",
        "-- Create basic tables",
        "CREATE TABLE IF NOT EXISTS content.files (",
        "    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),",
        "    filename VARCHAR(255) NOT NULL,",
        "    file_path TEXT NOT NULL,",
        "    file_size BIGINT NOT NULL,",
        "    content_type VARCHAR(100),",
        "    checksum VARCHAR(64),",
        "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
        ");",
        "",
        "CREATE TABLE IF NOT EXISTS metadata.file_metadata (",
        "    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),",
        "    file_id UUID REFERENCES content.files(id),",
        "    metadata_key VARCHAR(100) NOT NULL,",
        "    metadata_value TEXT,",
        "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
        ");",
        "",
        "-- Create indexes",
        "CREATE INDEX idx_files_filename ON content.files(filename);",
        "CREATE INDEX idx_files_content_type ON content.files(content_type);",
        "EOF"
      ]
    },
    {
      "step": 8,
      "title": "Environment Configuration",
      "commands": [
        "mkdir -p config/environments/development",
        "cat > config/environments/development/.env << 'EOF'",
        "# Database Configuration",
        "DATABASE_URL=postgresql://ai_q_user:ai_q_secure_password_2024@localhost:5432/ai_q_db",
        "REDIS_URL=redis://:ai_q_redis_password_2024@localhost:6379/0",
        "",
        "# Object Storage",
        "MINIO_ENDPOINT=localhost:9000",
        "MINIO_ACCESS_KEY=ai_q_minio_admin",
        "MINIO_SECRET_KEY=ai_q_minio_secure_password_2024",
        "",
        "# Vector Database",
        "WEAVIATE_URL=http://localhost:8080",
        "",
        "# Monitoring",
        "GRAFANA_URL=http://localhost:3001",
        "PROMETHEUS_URL=http://localhost:9090",
        "",
        "# Logging",
        "ELASTICSEARCH_URL=http://localhost:9200",
        "KIBANA_URL=http://localhost:5601",
        "",
        "# Application",
        "DEBUG=true",
        "LOG_LEVEL=DEBUG",
        "ENVIRONMENT=development",
        "EOF"
      ]
    }
  ],
  "service_summary": {
    "total_services": 10,
    "core_databases": "PostgreSQL 15, Redis 7",
    "storage_systems": "Minio S3, Weaviate vector DB",
    "ai_processing": "Text2Vec transformers, Multi2Vec CLIP",
    "monitoring": "Grafana dashboards, Prometheus metrics",
    "logging": "Elasticsearch storage, Kibana visualization"
  },
  "troubleshooting": [
    {
      "issue": "Port conflicts with existing services",
      "solution": "Check and stop conflicting services",
      "commands": ["netstat -tulpn | grep -E ':5432|:6379|:9000|:8080'"]
    },
    {
      "issue": "AI services timeout during startup",
      "solution": "First startup downloads ML models (2-5 minutes)",
      "note": "Monitor logs: docker logs ai-q-transformers"
    },
    {
      "issue": "Database connection fails",
      "solution": "Verify password and network connectivity",
      "validation": "docker logs ai-q-postgres"
    },
    {
      "issue": "Volume permission errors",
      "solution": "Ensure Docker has filesystem access",
      "commands": ["docker volume ls", "ls -la data/"]
    }
  ],
  "acceptance_criteria": [
    "Docker Compose defines 10+ services with proper configuration",
    "All services have restart policies and health checks",
    "Networks isolate service communication properly",
    "Persistent volumes configured for data retention",
    "Database initialization scripts created and tested",
    "Environment configuration files established",
    "Service dependencies properly defined",
    "All required ports exposed for external access"
  ],
  "validation_commands": [
    "docker-compose config --quiet && echo 'Compose file syntax valid'",
    "grep -c 'container_name:' docker-compose.yml | grep -E '10|[1-9][0-9]'",
    "grep -c 'volumes:' docker-compose.yml | grep -E '[7-9]|[1-9][0-9]'",
    "test -f config/database/init/01-init-database.sql && echo 'DB init exists'",
    "test -f config/environments/development/.env && echo 'Env config exists'"
  ],
  "performance_expectations": {
    "startup_time": "3-5 minutes for complete infrastructure",
    "memory_usage": "6-8GB total for all services",
    "disk_space": "10-15GB for initial setup",
    "external_ports": "8 ports exposed (5432,6379,9000,9001,8080,3001,9090,9200,5601)"
  },
  "next_task": "01-004: Infrastructure Deployment and Health Verification"
} 
{
  "version": "1.0",
  "last_updated": "2025-07-03T00:00:00Z",
  "created_by": "Claude Sonnet 4 - Sonnet 4",
  "converted_from": "E:\\kos\\ai-Q\\agents\\handoff\\NEXT_AGENT_EXECUTION_PROMPT.json",
  "conversion_timestamp": "2025-01-27T22:30:00Z",
  "converter": "RobustYAMLToJSONConverter v1.0",
  "purpose": "Complete execution prompt for the next agent to implement the AI-Q Knowledge Library System migration in autopilot mode, with comprehensive error checking and validation.\n",
  "agent_introduction": {
    "mandatory_format": "\"I am [YOUR_NAME], [YOUR_MODEL], taking over the AI-Q Knowledge Library System \nmigration project. My mission is to execute the complete migration implementation \nin autopilot mode, ensuring zero technical debt and production-only testing.\n\nI acknowledge the work of the previous agent (Claude Sonnet 4) and will thoroughly \nreview and validate all existing work before proceeding. I will document all my \nactions and include my agent identification in all files I create or modify.\n\nSession started: [CURRENT_TIMESTAMP]\"\n"
  },
  "critical_assumptions": [
    "Assume the previous agent made errors - Double-check all existing work for issues and inconsistencies",
    "Validate everything - Verify all documentation, configurations, and implementations",
    "Zero technical debt - No TODOs, temporary code, or manual steps allowed",
    "Production-only testing - All tests must use production data, services, and servers",
    "YAML/JSON only - All documentation must be in YAML or JSON format (no markdown)"
  ],
  "project_context": {
    "working_directory": "E:\\kos\\griot-main-win11\\ai-Q",
    "current_status": "Complete modular implementation ready, environment setup required",
    "critical_files": [
      "standards/enterprise_distribution_standards.json",
      "standards/zero_technical_debt_assurance.json",
      "execution/enterprise_distribution_execution_plan.json",
      "execution/industry_standards_large_projects.json",
      "handoff/AGENT_HANDOFF_AUTOPILOT.json",
      "handoff/PROJECT_STATUS_REPORT.json",
      "blueprint/ideal_aiq_kls_blueprint.json",
      "blueprint/comprehensive_project_review.json",
      "schemas/project_configuration_schema.json",
      "src/index.ts",
      "package.json",
      "config/env/environment-template.json"
    ]
  },
  "execution_sequence": {
    "phase_1_validation": {
      "step_1_review_existing_work": {
        "action": "Review and validate all existing work",
        "description": "Thoroughly examine all files and configurations for errors",
        "commands": [
          "cd E:\\kos\\griot-main-win11\\ai-Q",
          "dir /s /b *.json",
          "dir /s /b *.json",
          "dir /s /b *.ts",
          "dir /s /b *.js"
        ],
        "validation": [
          "Check all YAML files for syntax errors",
          "Verify all references and cross-links",
          "Identify any missing or incomplete content",
          "Document any errors found",
          "Validate TypeScript compilation",
          "Check all configuration files"
        ],
        "documentation": [
          "Create validation report with findings",
          "Document any errors or inconsistencies found",
          "List all files that need correction",
          "Verify modular architecture compliance"
        ]
      },
      "step_2_verify_environment": {
        "action": "Verify environment and dependencies",
        "description": "Ensure all required tools and environments are available",
        "commands": [
          "python --version",
          "node --version",
          "docker --version",
          "git --version"
        ],
        "validation": [
          "Confirm all required tools are installed",
          "Verify Python virtual environment capability",
          "Check Docker service status",
          "Validate Git repository state"
        ],
        "documentation": [
          "Document environment status",
          "List any missing dependencies",
          "Create environment setup guide if needed"
        ]
      }
    },
    "phase_2_implementation": {
      "step_3_setup_environment": {
        "action": "Set up development environment",
        "description": "Create production-parity development environment",
        "commands": [
          "cd E:\\kos\\griot-main-win11\\ai-Q",
          "python -m venv venv",
          "venv\\Scripts\\activate.bat",
          "pip install --upgrade pip",
          "pip install -r requirements.txt",
          "npm install",
          "npm run type-check",
          "npm run lint"
        ],
        "validation": [
          "Verify virtual environment creation",
          "Confirm all dependencies installed",
          "Test basic functionality",
          "Validate security scanning tools",
          "Verify TypeScript compilation",
          "Confirm linting passes"
        ],
        "documentation": [
          "Document environment setup process",
          "Create troubleshooting guide",
          "Update handoff documentation",
          "Verify all tools functional"
        ]
      },
      "step_4_implement_core_system": {
        "action": "Implement core system components",
        "description": "Build the core AI-Q Knowledge Library System",
        "commands": [
          "Follow enterprise_distribution_execution_plan.json",
          "Implement gRPC service endpoints",
          "Create content processing pipeline",
          "Build RAG engine integration",
          "Set up database connections",
          "Configure monitoring and logging"
        ],
        "validation": [
          "All components functional",
          "All tests passing with production data",
          "Performance benchmarks met",
          "Security requirements satisfied",
          "All modules within size limits",
          "Type safety maintained"
        ],
        "documentation": [
          "Update implementation documentation",
          "Create API documentation",
          "Document all configuration changes",
          "Verify modular architecture"
        ]
      },
      "step_5_migrate_content": {
        "action": "Migrate existing content",
        "description": "Migrate all existing content to new system",
        "commands": [
          "Analyze all existing content in griot-main-win11",
          "Apply naming conventions",
          "Convert markdown to YAML where appropriate",
          "Create cross-references and relationships"
        ],
        "validation": [
          "All content successfully migrated",
          "No data loss or corruption",
          "All relationships preserved",
          "Naming conventions applied consistently"
        ],
        "documentation": [
          "Create migration report",
          "Document content mapping",
          "Update content inventory"
        ]
      }
    },
    "phase_3_testing": {
      "step_6_comprehensive_testing": {
        "action": "Comprehensive testing with production data",
        "description": "Execute all tests using production data and services",
        "commands": [
          "python -m pytest tests/ --verbose",
          "python -m pytest tests/ --cov=src --cov-report=html"
        ],
        "validation": [
          "All tests passing",
          "Performance benchmarks met",
          "Security requirements satisfied",
          "No critical vulnerabilities"
        ],
        "documentation": [
          "Create test results report",
          "Document any issues found",
          "Update test documentation"
        ]
      },
      "step_7_system_integration": {
        "action": "System integration and validation",
        "description": "Verify complete system integration",
        "commands": [
          "Test all end-to-end workflows",
          "Validate all integrations",
          "Verify all monitoring and alerting",
          "Test disaster recovery procedures"
        ],
        "validation": [
          "All workflows functional",
          "All integrations working",
          "Monitoring and alerting active",
          "Recovery procedures tested"
        ],
        "documentation": [
          "Create integration report",
          "Document operational procedures",
          "Update handoff documentation"
        ]
      }
    }
  },
  "error_handling": {
    "detection": [
      "Automated error detection in all processes",
      "Real-time validation of all changes",
      "Continuous monitoring of system health",
      "Immediate alerting for any issues"
    ],
    "recovery": [
      "Instant rollback on any failure",
      "Root cause analysis for all issues",
      "Process improvement to prevent recurrence",
      "Documentation of lessons learned"
    ],
    "validation": [
      "Double-check all previous agent work",
      "Verify all configurations and settings",
      "Test all functionality thoroughly",
      "Validate against all standards and policies"
    ]
  },
  "documentation_requirements": {
    "agent_identification": [
      "Include agent name and model in all files created",
      "Add creation timestamp to all documents",
      "Document all actions and decisions",
      "Maintain audit trail of all changes"
    ],
    "file_headers": {
      "template": "# [Document Title]\n---\nversion: \"[VERSION]\"\nlast_updated: \"[TIMESTAMP]\"\ncreated_by: \"[AGENT_NAME] - [MODEL_VERSION]\"\npurpose: >\n  [Document purpose and description]\n"
    },
    "handoff_documentation": [
      "Complete project status report",
      "All technical decisions documented",
      "All configuration changes recorded",
      "All issues and resolutions documented",
      "Next steps and recommendations"
    ]
  },
  "success_criteria": {
    "technical": [
      "100% of features implemented and tested",
      "All tests using production data and services",
      "Zero critical security vulnerabilities",
      "99.9% uptime SLA achieved",
      "All performance benchmarks met"
    ],
    "quality": [
      "All code follows zero-debt policies",
      "Complete documentation coverage",
      "All compliance requirements met",
      "All handoff docs current",
      "Maintenance procedures established"
    ],
    "operational": [
      "All monitoring and alerting active",
      "All backup and recovery procedures tested",
      "All security controls operational",
      "All compliance monitoring active",
      "All maintenance procedures documented"
    ]
  },
  "critical_commands": {
    "environment_setup": [
      "cd E:\\kos\\griot-main-win11\\ai-Q",
      "python -m venv venv",
      "venv\\Scripts\\activate.bat",
      "pip install --upgrade pip",
      "pip install -r requirements.txt"
    ],
    "validation_commands": [
      "python -c \"import yaml; yaml.safe_load(open('file.json'))\"",
      "python -m pytest tests/ --verbose",
      "docker-compose up -d",
      "docker-compose logs"
    ],
    "testing_commands": [
      "python -m pytest tests/ --cov=src --cov-report=html",
      "python scripts/run_security_scan.py",
      "python scripts/performance_test.py",
      "python scripts/integration_test.py"
    ]
  },
  "completion_checklist": [
    "All existing work validated and corrected",
    "Development environment fully operational",
    "Core system implemented and tested",
    "All content migrated successfully",
    "All tests passing with production data",
    "All documentation complete and current",
    "All handoff docs updated",
    "Zero technical debt maintained",
    "All compliance requirements met",
    "System ready for next agent handoff"
  ],
  "final_requirements": [
    "Never skip validation steps",
    "Document every action taken",
    "Include your agent identification in all work",
    "Assume previous agent made errors and check everything",
    "Maintain zero technical debt throughout",
    "Use production data for all testing",
    "Update handoff documentation continuously"
  ],
  "conclusion": "This prompt provides complete guidance for implementing the AI-Q Knowledge Library System migration in autopilot mode. The agent must follow all instructions exactly, maintain zero technical debt, use production-only testing, and document all actions thoroughly.\nSuccess requires strict adherence to all policies, comprehensive error checking, and complete documentation of all work performed.\nExecute this prompt completely and thoroughly. Do not stop until all phases are  complete and all success criteria are met. "
}
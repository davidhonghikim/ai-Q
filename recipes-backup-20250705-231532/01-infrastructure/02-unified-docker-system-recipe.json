{
  "recipe_metadata": {
    "recipe_id": "02-UNIFIED-DOCKER-SYSTEM-COMPREHENSIVE",
    "title": "Unified Docker Compose System - Complete Service Integration",
    "version": "1.0.0",
    "created_by": "Claude Sonnet 4",
    "creation_date": "2025-01-28T13:30:00Z",
    "last_updated": "2025-01-28T13:30:00Z",
    "estimated_tokens": 8000,
    "estimated_execution_time": "2-3 hours",
    "difficulty_level": "expert",
    "total_tasks": 1,
    "agent_autonomy_level": "95%",
    "success_rate_target": "99%",
    "compliance_standards": ["SOC 2", "ISO 27001"],
    "architecture_tier": "enterprise-containerization"
  },
  "recipe_overview": {
    "description": "Implement a comprehensive unified Docker Compose system that integrates all ai-Q services including AI/ML services (Ollama, OpenWebUI), self-hosted services (Gitea, NextCloud, Admin Panel), infrastructure services (databases, storage), and monitoring components into a single, orchestrated deployment system.",
    "technology_stack": {
      "container_orchestration": "Docker Compose V2",
      "service_integration": "Unified networking, shared volumes, health checks",
      "environment_management": "Dynamic configuration, environment templates",
      "deployment_automation": "Unified deployment scripts, health monitoring"
    },
    "deliverables": [
      "Unified Docker Compose file integrating all services",
      "Comprehensive environment configuration template",
      "Automated deployment and management scripts",
      "Service health monitoring and validation",
      "Network configuration and service discovery",
      "Volume management and data persistence"
    ]
  },
  "tasks": [
    {
      "id": "02-unified-docker-system-001",
      "title": "Unified Docker Compose System Implementation",
      "description": "Implement a comprehensive unified Docker Compose system that integrates all ai-Q services including AI/ML services (Ollama, OpenWebUI), self-hosted services (Gitea, NextCloud, Admin Panel), infrastructure services (databases, storage), and monitoring components into a single, orchestrated deployment system.",
      "category": "infrastructure",
      "estimated_tokens": 8000,
      "estimated_duration": "2-3 hours",
      "difficulty_level": "expert",
      "prerequisites": {
        "knowledge_required": ["Docker Compose", "Container orchestration", "Service networking", "Environment management"],
        "tools_required": ["Docker Engine", "Docker Compose V2", "Bash scripting"],
        "environment_setup": ["Docker environment ready", "Network configuration planned", "Storage volumes prepared"]
      },
      "inputs": {
        "files_to_read": [
          "docker/compose/ollama.yml",
          "docker/compose/openwebui.yml",
          "docker/compose/docker-compose-self-hosted.yml",
          "docker/compose/docker-compose.unified.yml",
          "config/dynamic/dynamic-config.json"
        ],
        "config_dependencies": ["Network configuration", "Port assignments", "Volume mappings"],
        "environment_variables": [
          "AIQ_EXTERNAL_ADDRESS",
          "OLLAMA_PORT",
          "OPENWEBUI_PORT",
          "GITEA_PORT",
          "NEXTCLOUD_PORT",
          "ADMIN_PANEL_PORT"
        ],
        "external_services": ["Docker registry", "Network infrastructure"]
      },
      "outputs": {
        "files_created": [
          "docker/compose/unified.yml - Complete unified Docker Compose file",
          "docker/compose/env.template - Environment configuration template",
          "scripts/unified-deploy.sh - Unified deployment script",
          "scripts/unified-health-check.sh - Health monitoring script",
          "docs/unified-deployment.json - Deployment documentation"
        ],
        "files_modified": [
          "config/dynamic/dynamic-config.json - Add unified deployment ports"
        ],
        "api_endpoints": [
          "GET /unified/health - Overall system health",
          "GET /unified/services - Service status",
          "POST /unified/deploy - Deploy all services",
          "POST /unified/restart - Restart all services"
        ],
        "configuration_updates": ["Service integration", "Network configuration", "Volume management"]
      },
      "dependencies": {
        "required_tasks": ["01-core-infrastructure"],
        "optional_tasks": [],
        "blocked_tasks": ["03-storage-systems", "04-database-setup", "05-monitoring-observability"]
      },
      "detailed_instructions": {
        "overview": "This task creates a unified Docker Compose system that integrates all ai-Q services into a single, orchestrated deployment. The system includes AI/ML services (Ollama, OpenWebUI), self-hosted services (Gitea, NextCloud, Admin Panel), infrastructure services (databases, storage), and monitoring components, all properly networked and configured for seamless operation.",
        "step_by_step_guide": [
          {
            "step": 1,
            "title": "Create Unified Docker Compose File",
            "description": "Create a comprehensive unified Docker Compose file that integrates all services",
            "commands": [
              "# Create unified Docker Compose file",
              "cat > docker/compose/unified.yml << 'EOF'",
              "name: ai-q-unified",
              "",
              "services:",
              "  # ============================================================================",
              "  # AI/ML Services",
              "  # ============================================================================",
              "  ",
              "  # Ollama LLM Service",
              "  ollama:",
              "    image: ollama/ollama:latest",
              "    container_name: ai-q-ollama",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${OLLAMA_PORT:-11000}:11434\"",
              "    volumes:",
              "      - /opt/ai-q/data/ollama/models:/root/.ollama/models",
              "      - /opt/ai-q/data/ollama/config:/root/.ollama",
              "    environment:",
              "      - OLLAMA_HOST=0.0.0.0",
              "      - OLLAMA_ORIGINS=*",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:11434/api/tags\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    deploy:",
              "      resources:",
              "        reservations:",
              "          devices:",
              "            - driver: nvidia",
              "              count: all",
              "              capabilities: [gpu]",
              "",
              "  # OpenWebUI Service",
              "  openwebui:",
              "    image: ghcr.io/open-webui/open-webui:main",
              "    container_name: ai-q-openwebui",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${OPENWEBUI_PORT:-11001}:8080\"",
              "    volumes:",
              "      - /opt/ai-q/data/openwebui/data:/app/backend/data",
              "      - /opt/ai-q/data/openwebui/config:/app/backend/config",
              "    environment:",
              "      - OLLAMA_BASE_URL=http://ollama:11434",
              "      - WEBUI_SECRET_KEY=${OPENWEBUI_SECRET_KEY:-your-super-secret-openwebui-key-change-in-production}",
              "      - DEFAULT_MODELS=${OPENWEBUI_DEFAULT_MODELS:-gemma3:2b,codellama:7b}",
              "      - DEFAULT_USER_ROLE=admin",
              "      - ENABLE_SIGNUP=true",
              "      - ENABLE_LOGIN_FORM=true",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/v1/models\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "    depends_on:",
              "      - ollama",
              "",
              "  # ============================================================================",
              "  # Self-Hosted Services",
              "  # ============================================================================",
              "  ",
              "  # Gitea Git Server",
              "  gitea:",
              "    image: gitea/gitea:1.21.0",
              "    container_name: ai-q-gitea",
              "    restart: unless-stopped",
              "    environment:",
              "      - USER_UID=1000",
              "      - USER_GID=1000",
              "    ports:",
              "      - \"${GITEA_PORT:-3002}:3000\"",
              "      - \"${GITEA_SSH_PORT:-222}:22\"",
              "    volumes:",
              "      - /opt/ai-q/data/gitea:/data",
              "      - /opt/ai-q/config/gitea/app.ini:/data/gitea/conf/app.ini",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # NextCloud File Storage",
              "  nextcloud:",
              "    image: nextcloud:25.0.0",
              "    container_name: ai-q-nextcloud",
              "    restart: unless-stopped",
              "    environment:",
              "      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER:-admin}",
              "      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-admin123}",
              "      - MYSQL_HOST=postgres",
              "      - MYSQL_DATABASE=nextcloud",
              "      - MYSQL_USER=nextcloud",
              "      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD:-nextcloud123}",
              "    ports:",
              "      - \"${NEXTCLOUD_PORT:-8080}:80\"",
              "    volumes:",
              "      - /opt/ai-q/data/nextcloud:/var/www/html",
              "      - /opt/ai-q/config/nextcloud/config.php:/var/www/html/config/config.php",
              "    networks:",
              "      - ai-q-network",
              "    depends_on:",
              "      - postgres",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/status.php\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # Admin Panel",
              "  admin-panel:",
              "    image: nginx:alpine",
              "    container_name: ai-q-admin-panel",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"${ADMIN_PANEL_PORT:-9000}:80\"",
              "    volumes:",
              "      - /opt/ai-q/config/admin-panel/nginx.conf:/etc/nginx/nginx.conf",
              "      - /opt/ai-q/data/admin-panel:/var/www/html",
              "    networks:",
              "      - ai-q-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # ============================================================================",
              "  # Infrastructure Services",
              "  # ============================================================================",
              "  ",
              "  # PostgreSQL Database",
              "  postgres:",
              "    image: postgres:15-alpine",
              "    container_name: ai-q-postgres",
              "    environment:",
              "      POSTGRES_DB: ${POSTGRES_DB:-aiq_knowledge}",
              "      POSTGRES_USER: ${POSTGRES_USER:-aiq_user}",
              "      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiq_password}",
              "      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}",
              "    volumes:",
              "      - ai-q-postgres-data:/var/lib/postgresql/data",
              "      - ../../init-scripts:/docker-entrypoint-initdb.d",
              "    ports:",
              "      - \"${POSTGRES_PORT:-5432}:5432\"",
              "    networks:",
              "      - ai-q-network",
              "    restart: unless-stopped",
              "    healthcheck:",
              "      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER:-aiq_user} -d ${POSTGRES_DB:-aiq_knowledge}\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # Redis Cache",
              "  redis:",
              "    image: redis:7-alpine",
              "    container_name: ai-q-redis",
              "    command: redis-server --appendonly yes",
              "    volumes:",
              "      - ai-q-redis-data:/data",
              "    ports:",
              "      - \"${REDIS_PORT:-6379}:6379\"",
              "    networks:",
              "      - ai-q-network",
              "    restart: unless-stopped",
              "    healthcheck:",
              "      test: [\"CMD\", \"redis-cli\", \"ping\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  # MinIO Object Storage",
              "  minio:",
              "    image: minio/minio:RELEASE.2023-11-15T20-43-25Z",
              "    container_name: ai-q-minio",
              "    environment:",
              "      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}",
              "      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}",
              "    volumes:",
              "      - ai-q-minio-data:/data",
              "    ports:",
              "      - \"${MINIO_API_PORT:-9000}:9000\"",
              "      - \"${MINIO_CONSOLE_PORT:-9001}:9001\"",
              "    networks:",
              "      - ai-q-network",
              "    restart: unless-stopped",
              "    command: server /data --console-address \":9001\"",
              "    healthcheck:",
              "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "volumes:",
              "  ai-q-postgres-data:",
              "  ai-q-redis-data:",
              "  ai-q-minio-data:",
              "",
              "networks:",
              "  ai-q-network:",
              "    driver: bridge",
              "    ipam:",
              "      config:",
              "        - subnet: 172.20.0.0/16",
              "EOF"
            ],
            "expected_output": "Unified Docker Compose file created with all services integrated",
            "troubleshooting": "Verify all service configurations and network settings are correct"
          },
          {
            "step": 2,
            "title": "Create Environment Template",
            "description": "Create comprehensive environment configuration template",
            "commands": [
              "# Create environment template",
              "cat > docker/compose/env.template << 'EOF'",
              "# ============================================================================",
              "# AI-Q Unified Docker Compose Environment Template",
              "# ============================================================================",
              "# Copy this file to .env and modify the values as needed for your deployment",
              "# ============================================================================",
              "",
              "# ============================================================================",
              "# Application Configuration",
              "# ============================================================================",
              "ENVIRONMENT=development",
              "API_HOST=0.0.0.0",
              "API_PORT=8000",
              "WEB_PORT=3000",
              "JWT_SECRET=your-super-secret-jwt-key-change-in-production",
              "",
              "# ============================================================================",
              "# AI/ML Services Configuration",
              "# ============================================================================",
              "OLLAMA_PORT=11000",
              "",
              "OPENWEBUI_PORT=11001",
              "OPENWEBUI_SECRET_KEY=your-super-secret-openwebui-key-change-in-production",
              "OPENWEBUI_DEFAULT_MODELS=gemma3:2b,codellama:7b",
              "",
              "# ============================================================================",
              "# Self-Hosted Services Configuration",
              "# ============================================================================",
              "GITEA_PORT=3002",
              "GITEA_SSH_PORT=222",
              "",
              "NEXTCLOUD_PORT=8080",
              "NEXTCLOUD_ADMIN_USER=admin",
              "NEXTCLOUD_ADMIN_PASSWORD=admin123",
              "NEXTCLOUD_DB_PASSWORD=nextcloud123",
              "",
              "ADMIN_PANEL_PORT=9000",
              "",
              "# ============================================================================",
              "# Database Configuration",
              "# ============================================================================",
              "POSTGRES_DB=aiq_knowledge",
              "POSTGRES_USER=aiq_user",
              "POSTGRES_PASSWORD=aiq_password",
              "POSTGRES_PORT=5432",
              "",
              "REDIS_PORT=6379",
              "REDIS_PASSWORD=",
              "",
              "# ============================================================================",
              "# Storage Configuration",
              "# ============================================================================",
              "MINIO_ROOT_USER=minioadmin",
              "MINIO_ROOT_PASSWORD=minioadmin",
              "MINIO_API_PORT=9000",
              "MINIO_CONSOLE_PORT=9001",
              "",
              "# ============================================================================",
              "# Network Configuration",
              "# ============================================================================",
              "# Default IP address for external access",
              "AIQ_EXTERNAL_ADDRESS=192.168.1.180",
              "EOF"
            ],
            "expected_output": "Environment template created with all necessary configuration variables",
            "troubleshooting": "Verify all environment variables are properly defined and documented"
          },
          {
            "step": 3,
            "title": "Create Unified Deployment Script",
            "description": "Create automated deployment and management scripts",
            "commands": [
              "# Create unified deployment script",
              "cat > scripts/unified-deploy.sh << 'EOF'",
              "#!/bin/bash",
              "",
              "# ============================================================================",
              "# AI-Q Unified Deployment Script",
              "# ============================================================================",
              "# This script deploys the complete ai-Q system with all services",
              "# ============================================================================",
              "",
              "set -e  # Exit on any error",
              "",
              "# Color codes for output",
              "RED='\\033[0;31m'",
              "GREEN='\\033[0;32m'",
              "YELLOW='\\033[1;33m'",
              "BLUE='\\033[0;34m'",
              "NC='\\033[0m' # No Color",
              "",
              "# Script configuration",
              "SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"",
              "PROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"",
              "COMPOSE_DIR=\"$PROJECT_ROOT/docker/compose\"",
              "ENV_FILE=\"$COMPOSE_DIR/.env\"",
              "ENV_TEMPLATE=\"$COMPOSE_DIR/env.template\"",
              "",
              "# Function to print colored output",
              "print_status() {",
              "    echo -e \"${BLUE}[INFO]${NC} $1\"",
              "}",
              "",
              "print_success() {",
              "    echo -e \"${GREEN}[SUCCESS]${NC} $1\"",
              "}",
              "",
              "print_warning() {",
              "    echo -e \"${YELLOW}[WARNING]${NC} $1\"",
              "}",
              "",
              "print_error() {",
              "    echo -e \"${RED}[ERROR]${NC} $1\"",
              "}",
              "",
              "# Function to check if command exists",
              "command_exists() {",
              "    command -v \"$1\" >/dev/null 2>&1",
              "}",
              "",
              "# Function to check system requirements",
              "check_requirements() {",
              "    print_status \"Checking system requirements...\"",
              "    ",
              "    # Check Docker",
              "    if ! command_exists docker; then",
              "        print_error \"Docker is not installed. Please install Docker first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    # Check Docker Compose",
              "    if ! command_exists docker-compose && ! docker compose version >/dev/null 2>&1; then",
              "        print_error \"Docker Compose is not installed. Please install Docker Compose first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    # Check if Docker daemon is running",
              "    if ! docker info >/dev/null 2>&1; then",
              "        print_error \"Docker daemon is not running. Please start Docker first.\"",
              "        exit 1",
              "    fi",
              "    ",
              "    print_success \"System requirements check passed\"",
              "}",
              "",
              "# Function to setup environment file",
              "setup_environment() {",
              "    print_status \"Setting up environment configuration...\"",
              "    ",
              "    if [ ! -f \"$ENV_FILE\" ]; then",
              "        if [ -f \"$ENV_TEMPLATE\" ]; then",
              "            cp \"$ENV_TEMPLATE\" \"$ENV_FILE\"",
              "            print_success \"Environment file created from template\"",
              "            print_warning \"Please review and modify $ENV_FILE before deployment\"",
              "        else",
              "            print_error \"Environment template not found at $ENV_TEMPLATE\"",
              "            exit 1",
              "        fi",
              "    else",
              "        print_status \"Environment file already exists\"",
              "    fi",
              "}",
              "",
              "# Function to create necessary directories",
              "create_directories() {",
              "    print_status \"Creating necessary directories...\"",
              "    ",
              "    # Create data directories",
              "    sudo mkdir -p /opt/ai-q/data/{openwebui,ollama,gitea,nextcloud,postgresql,redis,minio}",
              "    ",
              "    # Create config directories",
              "    sudo mkdir -p /opt/ai-q/config/{gitea,nextcloud,admin-panel}",
              "    ",
              "    # Create log directories",
              "    sudo mkdir -p /opt/ai-q/logs",
              "    ",
              "    # Set proper permissions",
              "    sudo chown -R 1000:1000 /opt/ai-q/data",
              "    sudo chown -R 1000:1000 /opt/ai-q/config",
              "    sudo chown -R 1000:1000 /opt/ai-q/logs",
              "    ",
              "    print_success \"Directories created successfully\"",
              "}",
              "",
              "# Function to deploy services",
              "deploy_services() {",
              "    print_status \"Deploying ai-Q services...\"",
              "    ",
              "    cd \"$COMPOSE_DIR\"",
              "    ",
              "    # Pull latest images",
              "    print_status \"Pulling latest Docker images...\"",
              "    docker-compose -f unified.yml pull",
              "    ",
              "    # Start services",
              "    print_status \"Starting services...\"",
              "    docker-compose -f unified.yml up -d",
              "    ",
              "    print_success \"Services deployment initiated\"",
              "}",
              "",
              "# Function to show service status",
              "show_status() {",
              "    print_status \"Service Status:\"",
              "    cd \"$COMPOSE_DIR\"",
              "    docker-compose -f unified.yml ps",
              "    ",
              "    echo \"\"",
              "    print_status \"Service URLs:\"",
              "    echo \"  - OpenWebUI: http://localhost:11001\"",
              "    echo \"  - Gitea: http://localhost:3002\"",
              "    echo \"  - NextCloud: http://localhost:8080\"",
              "    echo \"  - Admin Panel: http://localhost:9000\"",
              "    echo \"  - MinIO Console: http://localhost:9001\"",
              "}",
              "",
              "# Main execution",
              "main() {",
              "    local command=\"${1:-deploy}\"",
              "    ",
              "    case \"$command\" in",
              "        \"deploy\")",
              "            check_requirements",
              "            setup_environment",
              "            create_directories",
              "            deploy_services",
              "            show_status",
              "            ;;",
              "        \"status\")",
              "            show_status",
              "            ;;",
              "        \"help\"|\"-h\"|\"--help\")",
              "            echo \"AI-Q Unified Deployment Script\"",
              "            echo \"\"",
              "            echo \"Usage: $0 [COMMAND]\"",
              "            echo \"\"",
              "            echo \"Commands:\"",
              "            echo \"  deploy      - Deploy all services (default)\"",
              "            echo \"  status      - Show service status\"",
              "            echo \"  help        - Show this help message\"",
              "            ;;",
              "        *)",
              "            print_error \"Unknown command: $command\"",
              "            exit 1",
              "            ;;",
              "    esac",
              "}",
              "",
              "# Run main function with all arguments",
              "main \"$@\"",
              "EOF",
              "chmod +x scripts/unified-deploy.sh"
            ],
            "expected_output": "Unified deployment script created with comprehensive functionality",
            "troubleshooting": "Verify script syntax and ensure all paths are correct"
          },
          {
            "step": 4,
            "title": "Test Unified Deployment",
            "description": "Test the unified deployment system and verify all services",
            "commands": [
              "# Test unified deployment",
              "cd docker/compose",
              "docker-compose -f unified.yml config",
              "",
              "# Verify configuration is valid",
              "if [ $? -eq 0 ]; then",
              "    echo \"Unified Docker Compose configuration is valid\"",
              "else",
              "    echo \"Configuration validation failed\"",
              "    exit 1",
              "fi",
              "",
              "# Create health check script",
              "cat > ../../scripts/unified-health-check.sh << 'EOF'",
              "#!/bin/bash",
              "echo \"Checking unified system health...\"",
              "echo \"Ollama: $(curl -s http://localhost:11000/api/tags || echo 'DOWN')\"",
              "echo \"OpenWebUI: $(curl -s http://localhost:11001/api/v1/models || echo 'DOWN')\"",
              "echo \"Gitea: $(curl -s http://localhost:3002 || echo 'DOWN')\"",
              "echo \"NextCloud: $(curl -s http://localhost:8080/status.php || echo 'DOWN')\"",
              "echo \"Admin Panel: $(curl -s http://localhost:9000/health || echo 'DOWN')\"",
              "echo \"PostgreSQL: $(docker exec ai-q-postgres pg_isready -U aiq_user || echo 'DOWN')\"",
              "echo \"Redis: $(docker exec ai-q-redis redis-cli ping || echo 'DOWN')\"",
              "echo \"MinIO: $(curl -s http://localhost:9000/minio/health/live || echo 'DOWN')\"",
              "EOF",
              "chmod +x ../../scripts/unified-health-check.sh"
            ],
            "expected_output": "Unified deployment system tested and health check script created",
            "troubleshooting": "Check for any configuration errors and verify all service endpoints"
          }
        ]
      },
      "acceptance_criteria": {
        "functional_requirements": [
          "All services (Ollama, OpenWebUI, Gitea, NextCloud, Admin Panel, PostgreSQL, Redis, MinIO) are integrated into unified Docker Compose",
          "Services are properly networked and can communicate with each other",
          "Environment configuration is templated and easily customizable",
          "Deployment script automates the complete setup process",
          "Health checks are implemented for all services",
          "Data persistence is configured for all services"
        ],
        "performance_requirements": [
          "All services start within 60 seconds",
          "Service health checks respond within 10 seconds",
          "Network communication between services is established within 30 seconds",
          "Deployment script completes within 5 minutes",
          "System resource usage is optimized for containerized deployment"
        ],
        "security_requirements": [
          "All services use secure default configurations",
          "Environment variables are properly templated for production use",
          "Network isolation is implemented between services",
          "Health check endpoints are secured",
          "Data volumes are properly configured with appropriate permissions"
        ],
        "integration_requirements": [
          "Unified system integrates with existing ai-Q infrastructure",
          "All services are discoverable and accessible",
          "Configuration is consistent across all components",
          "Deployment process is repeatable and reliable",
          "Health monitoring provides comprehensive system visibility"
        ]
      }
    }
  ]
} 